{"version":3,"sources":["/home/hxr/arbeit/galaxy/client/galaxy/scripts/components/galaxy/scripts/components/Citations.vue","/home/hxr/arbeit/galaxy/client/galaxy/scripts/components/galaxy/scripts/components/WorkflowImport.vue","/home/hxr/arbeit/galaxy/client/galaxy/scripts/components/galaxy/scripts/components/DisplayStructured.vue","/home/hxr/arbeit/galaxy/client/galaxy/scripts/components/galaxy/scripts/components/HistoryView.vue","/home/hxr/arbeit/galaxy/client/galaxy/scripts/components/galaxy/scripts/components/PluginList.vue"],"names":[],"mappings":"AAgMA,qBACA,oBAAA,CACA,AAEA,uBACA,WAAA,AACA,YAAA,CACA,AAEA,kBACA,gBAAA,CACA,ACnIA,YACA,aAAA,CACA,ACkBA,MACA,eAAA,CACA,AAEA,OACA,oBAAA,AACA,UAAA,CACA,AACA,eACA,gBAAA,CACA,AAEA,WACA,cAAA,CACA,AAEA,UACA,sBAAA,AACA,gBAAA,CACA,AACA,kBACA,mBAAA,AACA,gBAAA,CACA,AACA,iBACA,UAAA,CACA,AACA,gBACA,yBAAA,CACA,AACA,0BACA,SAAA,AACA,QAAA,CACA,AAEA,aACA,iBAAA,AACA,gBAAA,AACA,gBAAA,CACA,AACA,kBACA,yBAAA,AACA,gBAAA,CACA,AACA,iDACA,4BAAA,CACA,AACA,kBACA,gBAAA,AACA,eAAA,AACA,SAAA,AACA,6BAAA,AACA,+BAAA,CACA,AAKA,mCACA,aAAA,CACA,AAEA,YACA,aAAA,AACA,eAAA,CACA,AACA,2BACA,iBAAA,AACA,oBAAA,AACA,aAAA,CACA,AACA,iCACA,WAAA,CACA,AACA,4BACA,gBAAA,CACA,AAIA,iBACA,WAAA,CACA,AAEA,aAEA,qBAAA,uBAAA,AACA,gBAAA,CACA,AACA,qBACA,gCAAA,AACA,WAAA,CACA,AACA,kDAEA,UAAA,CACA,AAEA,aACA,gBAAA,AACA,oBAAA,CACA,AACA,sCACA,qBAAA,CACA,AACA,yBACA,4BAAA,CACA,AACA,gCACA,gBAAA,AACA,iBAAA,CACA,ACvFA,uBACA,cAAA,AACA,sBAAA,AACA,6BAAA,AACA,WAAA,AACA,WAAA,CACA,AACA,gCACA,cAAA,CACA,AACA,sCACA,cAAA,CACA,AACA,MACA,oBAAA,CACA,ACJA,SACA,cAAA,AACA,YAAA,CACA,AACA,SACA,gBAAA,AACA,iBAAA,CACA,AACA,eACA,WAAA,AACA,eAAA,CACA","file":"libs.css","sourcesContent":["<template>\n    <div class=\"toolForm\">\n        <div class=\"toolFormTitle\">\n            Citations\n            <button v-if=\"viewRender\" v-on:click=\"toggleViewRender\" type=\"button\" class=\"btn btn-sm btn-secondary citations-to-bibtex\" title=\"Show all in BibTeX format.\">\n                <i class=\"fa fa-pencil-square-o\"></i>\n                Show BibTeX\n            </button>\n            <button v-else type=\"button\" v-on:click=\"toggleViewRender\" class=\"btn btn-sm btn-secondary citations-to-formatted\" title=\"Return to formatted citation list.\">\n                <i class=\"fa fa-times\"></i>\n                Hide BibTeX\n            </button>\n        </div>\n        <div class=\"citations-bibtex toolFormBody citation-padding\">\n            <div v-if=\"source === 'histories'\" class=\"infomessage\">\n                When writing up your analysis, remember to include all references that should be cited in order\n                to completely describe your work. Also, please remember to <a href=\"https://galaxyproject.org/citing-galaxy\">cite Galaxy</a>.\n            </div>\n            <span v-if=\"viewRender\" class=\"citations-formatted\">\n                <p v-html=\"formattedReferences\">\n                </p>\n            </span>\n            <textarea v-else class=\"citations-bibtex-text\">\n                {{ content }}\n            </textarea>\n        </div>\n    </div>\n</template>\n<script>\nimport axios from \"axios\";\nimport * as bibtexParse from \"libs/bibtexParse\";\nimport { convertLaTeX } from \"latex-to-unicode-converter\";\nimport { stringifyLaTeX } from \"latex-parser\";\n\nexport default {\n    props: {\n        source: {\n            type: String,\n            required: true\n        },\n        id: {\n            type: String,\n            required: true\n        },\n        viewRender: {\n            type: Boolean,\n            requried: false,\n            default: true\n        }\n    },\n    data() {\n        return {\n            citations: [],\n            content: \"\",\n            errors: []\n        };\n    },\n    computed: {\n        formattedReferences: function() {\n            return this.citations.reduce(\n                (a, b) => a.concat(`<p class=\"formatted-reference\">${this.formattedReference(b)}</p>`),\n                \"\"\n            );\n        }\n    },\n    created: function() {\n        axios\n            .get(`${Galaxy.root}api/${this.source}/${this.id}/citations`)\n            .then(response => {\n                this.content = \"\";\n                for (var rawCitation of response.data) {\n                    try {\n                        var citation = {\n                            fields: {},\n                            entryType: undefined\n                        };\n                        var parsed = bibtexParse.toJSON(rawCitation.content);\n                        if (parsed) {\n                            parsed = _.first(parsed);\n                            citation.entryType = parsed.entryType || undefined;\n                            for (var key in parsed.entryTags) {\n                                citation.fields[key.toLowerCase()] = parsed.entryTags[key];\n                            }\n                        }\n                        this.citations.push(citation);\n                        this.content += rawCitation.content;\n                    } catch (err) {\n                        console.warn(\"Error parsing bibtex: \" + err);\n                    }\n                }\n            })\n            .catch(e => {\n                console.error(e);\n            });\n    },\n    methods: {\n        formattedReference: function(citation) {\n            var entryType = citation.entryType;\n            var fields = citation.fields;\n\n            var ref = \"\";\n            var authorsAndYear = `${this._asSentence(\n                (fields.author ? fields.author : \"\") + (fields.year ? ` (${fields.year})` : \"\")\n            )} `;\n            var title = fields.title || \"\";\n            var pages = fields.pages ? `pp. ${fields.pages}` : \"\";\n            var address = fields.address;\n            if (entryType == \"article\") {\n                var volume =\n                    (fields.volume ? fields.volume : \"\") +\n                    (fields.number ? ` (${fields.number})` : \"\") +\n                    (pages ? `, ${pages}` : \"\");\n                ref = `${authorsAndYear +\n                    this._asSentence(title) +\n                    (fields.journal ? `In <em>${fields.journal}, ` : \"\") +\n                    this._asSentence(volume) +\n                    this._asSentence(fields.address)}</em>`;\n            } else if (entryType == \"inproceedings\" || entryType == \"proceedings\") {\n                ref = `${authorsAndYear +\n                    this._asSentence(title) +\n                    (fields.booktitle ? `In <em>${fields.booktitle}, ` : \"\") +\n                    (pages ? pages : \"\") +\n                    (address ? `, ${address}` : \"\")}.</em>`;\n            } else if (entryType == \"mastersthesis\" || entryType == \"phdthesis\") {\n                ref =\n                    authorsAndYear +\n                    this._asSentence(title) +\n                    (fields.howpublished ? `${fields.howpublished}. ` : \"\") +\n                    (fields.note ? `${fields.note}.` : \"\");\n            } else if (entryType == \"techreport\") {\n                ref =\n                    authorsAndYear +\n                    this._asSentence(title) +\n                    this._asSentence(fields.institution) +\n                    this._asSentence(fields.number) +\n                    this._asSentence(fields.type);\n            } else if (entryType == \"book\" || entryType == \"inbook\" || entryType == \"incollection\") {\n                ref = `${authorsAndYear} ${this._formatBookInfo(fields)}`;\n            } else {\n                ref = `${authorsAndYear} ${this._asSentence(title)}${this._asSentence(\n                    fields.howpublished\n                )}${this._asSentence(fields.note)}`;\n            }\n            var doiUrl = \"\";\n            if (fields.doi) {\n                doiUrl = `http://dx.doi.org/${fields.doi}`;\n                ref += `[<a href=\"${doiUrl}\" target=\"_blank\">doi:${fields.doi}</a>]`;\n            }\n            var url = fields.url || doiUrl;\n            if (url) {\n                ref += `[<a href=\"${url}\" target=\"_blank\">Link</a>]`;\n            }\n            return convertLaTeX({ onError: (error, latex) => `{${stringifyLaTeX(latex)}}` }, ref);\n        },\n        _formatBookInfo: function(fields) {\n            var info = \"\";\n            if (fields.chapter) {\n                info += `${fields.chapter} in `;\n            }\n            if (fields.title) {\n                info += `<em>${fields.title}</em>`;\n            }\n            if (fields.editor) {\n                info += `, Edited by ${fields.editor}, `;\n            }\n            if (fields.publisher) {\n                info += `, ${fields.publisher}`;\n            }\n            if (fields.pages) {\n                info += `, pp. ${fields.pages}`;\n            }\n            if (fields.series) {\n                info += `, <em>${fields.series}</em>`;\n            }\n            if (fields.volume) {\n                info += `, Vol.${fields.volume}`;\n            }\n            if (fields.issn) {\n                info += `, ISBN: ${fields.issn}`;\n            }\n            return `${info}.`;\n        },\n        _asSentence: function(str) {\n            return str && str.trim() ? `${str}. ` : \"\";\n        },\n        toggleViewRender: function() {\n            this.viewRender = !this.viewRender;\n        }\n    }\n};\n</script>\n<style>\n.citations-formatted {\n    word-wrap: break-word;\n}\n\n.citations-bibtex-text {\n    width: 100%;\n    height: 500px;\n}\n\n.citation-padding {\n    padding: 5px 10px;\n}\n</style>\n","<template>\n    <div class=\"ui-portlet-limited\">\n        <div class=\"portlet-header\">\n            <div class=\"portlet-title\">\n                <i class=\"portlet-title-icon fa fa-upload\"></i>\n                <span class=\"portlet-title-text\"><b>Import Workflow</b></span>\n            </div>\n        </div>\n        <div class=\"portlet-content\">\n            <div v-if=\"errormessage\" class=\"ui-message alert alert-danger\">\n                {{ errormessage }}\n            </div>\n            <div class=\"portlet-body\">\n                <form ref=\"form\">\n                    <div class=\"ui-form-element\">\n                        <div class=\"ui-form-title\">Archived Workflow URL</div>\n                        <input class=\"ui-input\" type=\"text\" name=\"archive_source\"/>\n                        <div class=\"ui-form-info\">If the workflow is accessible via a URL, enter the URL above and click Import.</div>\n                    </div>\n                    <div class=\"ui-form-element\">\n                        <div class=\"ui-form-title\">Archived Workflow file</div>\n                        <input type=\"file\" name=\"archive_file\"/>\n                        <div class=\"ui-form-info\">If the workflow is in a file on your computer, choose it and then click Import.</div>\n                    </div>\n                </form>\n            </div>\n            <div class=\"portlet-buttons\">\n                <input class=\"btn btn-primary\" type=\"button\" value=\"Import Workflow\" @click=\"submit\"/>\n            </div>\n        <hr/>\n        <div class=\"ui-form-element\">\n            <div class=\"ui-form-title\">Import a Workflow from myExperiment</div>\n            <a :href=myexperiment_target_url>Visit myExperiment</a>\n            <div class=\"ui-form-info\">Click the link above to visit myExperiment and search for Galaxy workflows.</div>\n        </div>\n        </div>\n    </div>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n            errormessage: null,\n            myexperiment_target_url: `http://${Galaxy.config.myexperiment_target_url}/galaxy?galaxy_url=${\n                window.location.protocol\n            }//${window.location.host}`\n        };\n    },\n    methods: {\n        submit: function() {\n            $.ajax({\n                url: `${Galaxy.root}api/workflows`,\n                data: new FormData(this.$refs.form),\n                cache: false,\n                contentType: false,\n                processData: false,\n                method: \"POST\"\n            })\n                .done(response => {\n                    window.location = `${Galaxy.root}workflows/list?message=${response.message}&status=${\n                        response.status\n                    }`;\n                })\n                .fail(response => {\n                    let message = response.responseJSON && response.responseJSON.err_msg;\n                    this.errormessage = message || \"Import failed for unkown reason.\";\n                });\n        }\n    }\n};\n</script>\n<style>\n.ui-message {\n    display: block;\n}\n</style>\n","<template>\n    <div>\n        <div v-for=\"error in errorMessages\">\n            <div class=\"alert alert-danger\" role=\"alert\">\n                {{ error }}\n            </div>\n        </div>\n        <div v-html=\"historyTemplate\">\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport HDAModel from \"mvc/history/hda-model\";\nimport HDAListItemEdit from \"mvc/history/hda-li-edit\";\n\nexport default {\n    props: {\n        id: {\n            type: String,\n            required: false\n        }\n    },\n    data() {\n        return {\n            historyTemplate: \"\",\n            historyJSON: {},\n            // TODO: Error message standardization -- use bootstrap-vue component or the like.\n            errorMessages: []\n        };\n    },\n    created: function() {\n        let historyId = this.id,\n            url = \"\";\n        if (historyId !== undefined && historyId !== \"\" && historyId !== null) {\n            url = Galaxy.root + \"history/display_structured?id=\" + historyId;\n        } else {\n            url = Galaxy.root + \"history/display_structured\";\n        }\n        this.ajaxCall(url);\n    },\n    methods: {\n        ajaxCall: function(url) {\n            axios\n                .get(url)\n                .then(response => {\n                    this._updateHistoryData(response);\n                })\n                .catch(e => {\n                    console.error(e);\n                    this.errorMessages.push(\n                        \"Error fetching history data -- reload the page to retry this request.  Please contact an administrator if the problem persists.\"\n                    );\n                });\n        },\n        _updateHistoryData: function(response) {\n            let historyItems = response.data;\n            this.historyTemplate = historyItems.template;\n            this.historyJSON = historyItems.history_json;\n        },\n        makeHistoryView: function(historyDict) {\n            window.hdas = historyDict.map(hda => {\n                return new HDAListItemEdit.HDAListItemEdit({\n                    model: new HDAModel.HistoryDatasetAssociation(hda),\n                    el: $(\"#hda-\" + hda.id),\n                    linkTarget: \"galaxy_main\",\n                    purgeAllowed: Galaxy.config.allow_user_dataset_purge,\n                    logger: Galaxy.logger\n                }).render(0);\n            });\n            // toggle the body section of each item in the structure\n            $(function() {\n                $(\".workflow, .tool\").each((index, element) => {\n                    let body = $(element).children(\".body\");\n                    $(element)\n                        .children(\".header\")\n                        .click(e => {\n                            body.toggle();\n                        })\n                        .addClass(\"clickable\");\n                });\n            });\n        }\n    },\n    updated: function() {\n        this.makeHistoryView(this.historyJSON);\n    }\n};\n</script>\n\n<style>\n.bold {\n    font-weight: bold;\n}\n\n.light {\n    font-weight: lighter;\n    color: grey;\n}\n.right-aligned {\n    text-align: right;\n}\n\n.clickable {\n    cursor: pointer;\n}\n\n.workflow {\n    border: solid gray 1px;\n    margin-bottom: 1%;\n}\n.workflow > .header {\n    background: lightgray;\n    padding: 5px 10px;\n}\n.workflow > .light {\n    color: gray;\n}\n.workflow > .body {\n    border-top: solid gray 1px;\n}\n.workflow > .body > .toolForm {\n    border: 0px;\n    margin: 0;\n}\n\ndiv.toolForm {\n    border-width: 1px;\n    border-radius: 0px;\n    margin-bottom: 1%;\n}\n.toolForm > .header {\n    background-color: #ebd9b2;\n    padding: 5px 10px;\n}\n.workflow div.toolForm:not(:first-child) .header {\n    border-top: 1px solid #d6b161;\n}\ndiv.toolFormTitle {\n    padding: 0px 0px 4px 0px;\n    margin: 0px 0px 4px 0px;\n    border: 0px;\n    background-color: transparent;\n    border-bottom: 1px solid #d6b161;\n}\n/* down from EBD9B2 --> 90743A */\n.toolFormTitle > .light {\n    color: #90743a;\n}\n.toolForm em {\n    color: #90743a;\n}\n\n.job-inputs {\n    margin: 0px 6px 0px 6px;\n    text-align: left;\n}\n.job-inputs td:nth-child(1) {\n    text-align: right;\n    font-weight: lighter;\n    color: #90743a;\n}\n.job-inputs td:nth-child(1):after {\n    content: \":\";\n}\n.job-inputs td:nth-child(2) {\n    padding-left: 4px;\n}\n.job-inputs em {\n}\n\n.job-inputs-show {\n    float: right;\n}\n\n.copied-from {\n    border: 1px solid lightgrey;\n    border-width: 1px 1px 0px 1px;\n    margin-bottom: 1%;\n}\n.copied-from .header {\n    border-bottom: 1px solid lightgrey;\n    padding: 5px;\n}\n.copied-from .header .bold,\n.copied-from .header a {\n    color: #888;\n}\n\n.dataset.hda {\n    min-height: 37px;\n    border-width: 0px 0px 1px 0px;\n}\n.toolFormBody > .dataset.hda:last-child {\n    border-bottom-width: 0px;\n}\n.dataset.hda:first-child {\n    border-top: 1px solid #d6b161;\n}\n.dataset.hda .dataset-title-bar {\n    padding-top: 8px;\n    padding-left: 10px;\n}\n</style>\n","<template>\n    <div id=\"structured-history-view\">\n        <div id=\"history-view-controls\" class=\"clear\"> \n            <div class=\"float-left\">\n                <span v-if=\"historyHistory['purged'] == false\" >\n                    <span v-if=\"historyData.user_is_owner == false\" >\n                        <button id=\"import\" class=\"btn btn-secondary\">Import and start using history</button>\n                    </span>\n                    <span v-if=\"historyData.user_is_owner && historyData.history_is_current == false\">\n                        <button id=\"switch-history\" class=\"btn btn-secondary\" v-on:click=\"switchHistory\">Switch to this history</button>\n                    </span>\n                    <button id=\"show-structure\" class=\"btn btn-secondary\" v-on:click=\"showStructure\">Show structure</button>\n                </span>\n            </div>\n            <div class=\"float-right\">\n                <button id=\"toggle-deleted\" class=\"btn btn-secondary\">Include deleted</button>\n                <button id=\"toggle-hidden\" class=\"btn btn-secondary\">Include hidden</button>\n            </div>\n        </div>\n        <div v-for=\"error in errorMessages\">\n            <div class=\"alert alert-danger\" role=\"alert\">\n                {{ error }}\n            </div>\n        </div>\n        <div :id=\"'history-' + historyHistory['id']\" class=\"history-panel unified-panel-body\" style=\"overflow: auto;\"></div>\n    </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport Vue from \"vue\";\nimport DisplayStructure from \"components/DisplayStructured.vue\";\nimport QueryStringParsing from \"utils/query-string-parsing\";\nimport HistoryView from \"mvc/history/history-view\";\n\nexport default {\n    props: {\n        id: {\n            type: String,\n            required: true\n        }\n    },\n    data() {\n        return {\n            historyData: {},\n            historyHistory: {},\n            // TODO: Pick a standard messaging convention and use a child component for it here.\n            errorMessages: []\n        };\n    },\n    created: function() {\n        let url = Galaxy.root + \"history/view/\" + this.id;\n        this.ajaxCall(url, this.updateHistoryView);\n    },\n    methods: {\n        ajaxCall: function(url, callBack) {\n            axios\n                .get(url)\n                .then(response => {\n                    callBack(response);\n                })\n                .catch(e => {\n                    this.showError(\n                        \"Error fetching histories -- reload the page to retry this request.  Please contact an administrator if the problem persists.\",\n                        e\n                    );\n                });\n        },\n        updateHistoryView: function(response) {\n            this.historyData = response.data;\n            this.historyHistory = response.data.history;\n        },\n        showError: function(errorMsg, verbose) {\n            console.error(verbose);\n            this.errorMessages.push(errorMsg);\n        },\n        makeHistoryView: function(history) {\n            $(function() {\n                let options = {\n                    hasMasthead: history.use_panels ? \"true\" : \"false\",\n                    userIsOwner: history.user_is_owner ? \"true\" : \"false\",\n                    isCurrent: history.history_is_current ? \"true\" : \"false\",\n                    historyJSON: history.history,\n                    showDeletedJson: history.show_deleted,\n                    showHiddenJson: history.show_hidden,\n                    initialModeDeleted: history.show_deleted ? \"showing_deleted\" : \"not_showing_deleted\",\n                    initialModeHidden: history.show_hidden ? \"showing_hidden\" : \"not_showing_hidden\",\n                    allowUserDatasetPurge: history.allow_user_dataset_purge ? \"true\" : \"false\"\n                };\n                options.viewToUse = options.userIsOwner\n                    ? { location: \"mvc/history/history-view-edit\", className: \"HistoryViewEdit\" }\n                    : { location: \"mvc/history/history-view\", className: \"HistoryView\" };\n                HistoryView.historyEntry(options);\n            });\n        },\n        showStructure: function() {\n            let displayStructureInstance = Vue.extend(DisplayStructure),\n                mountView = document.createElement(\"div\");\n            Galaxy.page.center.display(mountView);\n            new displayStructureInstance({ propsData: { id: QueryStringParsing.get(\"id\") } }).$mount(mountView);\n        },\n        switchHistory: function() {\n            let url = Galaxy.root + \"history/switch_to_history?hist_id=\" + this.historyHistory[\"id\"];\n            this.ajaxCall(url, this.reloadPage);\n        },\n        reloadPage: function() {\n            window.location.reload();\n        }\n    },\n    updated: function() {\n        this.makeHistoryView(this.historyData);\n    }\n};\n</script>\n\n<style>\n#history-view-controls {\n    flex: 0 0 44px;\n    background-color: white;\n    border-bottom: 1px solid #ddd;\n    width: 100%;\n    padding: 8px;\n}\n.history-panel > .controls .title {\n    font-size: 120%;\n}\n.history-panel > .controls .title input {\n    font-size: 100%;\n}\na.btn {\n    text-decoration: none;\n}\n</style>\n","<template>\n    <div class=\"ui-thumbnails\">\n        <div v-if=\"error\" class=\"ui-message ui-show alert alert-danger\">\n            {{ error }}\n        </div>\n        <div v-else class=\"ui-thumbnails-grid\">\n            <input class=\"search-query parent-width\" name=\"query\" placeholder=\"search visualizations\" autocomplete=\"off\" type=\"text\" v-model=\"search\">\n            <div v-for=\"plugin in plugins\">\n                <table v-if=\"match(plugin)\">\n                    <tr class=\"ui-thumbnails-item\" @click=\"select(plugin)\">\n                        <td>\n                            <img v-if=\"plugin.logo\" class=\"ui-thumbnails-image\" :src=\"plugin.logo\"/>\n                            <div v-else class=\"ui-thumbnails-icon fa fa-eye\"/>\n                        </td>\n                        <td>\n                            <div class=\"ui-thumbnails-description-title ui-form-info\">\n                                {{ plugin.html }}\n                            </div>\n                            <div class=\"ui-thumbnails-description-text ui-form-info\">\n                                {{ plugin.description }}\n                            </div>\n                        </td>\n                    </tr>\n                    <tr v-if=\"!fixed\">\n                        <td/>\n                        <td v-if=\"plugin.name == name\">\n                            <div v-if=\"hdas && hdas.length > 0\">\n                                <div class=\"ui-form-info ui-bold\">Select a dataset to visualize:</div>\n                                <div class=\"ui-select\">\n                                    <select class=\"select\" v-model=\"selected\">\n                                        <option v-for=\"file in hdas\" :value=\"file.id\">{{ file.name }}</option>\n                                    </select>\n                                    <div class=\"icon-dropdown fa fa-caret-down\"/>\n                                </div>\n                                <button type=\"button\" class=\"ui-button-default ui-float-left btn btn-primary\" @click=\"create(plugin)\">\n                                    <i class=\"icon fa fa-check ui-margin-right\"/>\n                                    <span class=\"title\">Create Visualization</span>\n                                </button>\n                            </div>\n                            <div v-else class=\"ui-message ui-show alert alert-danger\">\n                                There is no suitable dataset in your current history which can be visualized with this plugin.\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\nimport axios from \"axios\";\nexport default {\n    data() {\n        return {\n            plugins: [],\n            hdas: [],\n            search: \"\",\n            selected: null,\n            name: null,\n            error: null,\n            fixed: false\n        };\n    },\n    created() {\n        let url = `${Galaxy.root}api/plugins`;\n        let dataset_id = Galaxy.params.dataset_id;\n        if (dataset_id) {\n            this.fixed = true;\n            this.selected = dataset_id;\n            url += `?dataset_id=${dataset_id}`;\n        }\n        axios\n            .get(url)\n            .then(response => {\n                this.plugins = response.data;\n            })\n            .catch(e => {\n                this.error = this._errorMessage(e);\n            });\n    },\n    methods: {\n        select: function(plugin) {\n            if (this.fixed) {\n                this.create(plugin);\n            } else {\n                let history_id = Galaxy.currHistoryPanel && Galaxy.currHistoryPanel.model.id;\n                if (history_id) {\n                    axios\n                        .get(`${Galaxy.root}api/plugins/${plugin.name}?history_id=${history_id}`)\n                        .then(response => {\n                            this.name = plugin.name;\n                            this.hdas = response.data && response.data.hdas;\n                            if (this.hdas && this.hdas.length > 0) {\n                                this.selected = this.hdas[0].id;\n                            }\n                        })\n                        .catch(e => {\n                            this.error = this._errorMessage(e);\n                        });\n                } else {\n                    this.error = \"This option requires an accessible history.\";\n                }\n            }\n        },\n        create: function(plugin) {\n            let href = `${plugin.href}?dataset_id=${this.selected}`;\n            if (plugin.target == \"_top\") {\n                window.location.href = href;\n            } else {\n                $(\"#galaxy_main\").attr(\"src\", href);\n            }\n        },\n        match: function(plugin) {\n            return (\n                !this.search ||\n                plugin.name.indexOf(this.search) != -1 ||\n                (plugin.description && plugin.description.indexOf(this.search) != -1)\n            );\n        },\n        _errorMessage: function(e) {\n            let message = e && e.response && e.response.data && e.response.data.err_msg;\n            return message || \"Request failed for unkown reason.\";\n        }\n    }\n};\n</script>\n<style>\n.ui-show {\n    display: block;\n    margin-top: 0px;\n}\n.ui-bold {\n    font-weight: bold;\n    margin-bottom: 5px;\n}\n.ui-float-left {\n    float: left;\n    margin-top: 10px;\n}\n</style>\n"]}