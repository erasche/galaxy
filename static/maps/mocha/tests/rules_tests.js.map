{"version":3,"sources":["mocha/tests/rules_tests.js"],"names":["RULES","applyRules","rules","data","sources","columns","index","push","itShouldConform","specTestCase","i","it","assert","property","initial","expectedFinal","final","finalData","finalSources","deepEqual","undefined","error","describe","forEach"],"mappings":";;;;;;;;;;;;;;;AAIA,QAAMA,QAAQ,0BAASA,KAAvB;;AAEA,aAASC,UAAT,CAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,OAAjC,EAA0C;AACtC,YAAIC,UAAU,EAAd;AACA,YAAIF,KAAK,CAAL,CAAJ,EAAa;AACT,iBAAK,IAAMG,KAAX,IAAoBH,KAAK,CAAL,CAApB,EAA6B;AACzBE,wBAAQE,IAAR,CAAa,KAAb;AACH;AACJ;AACD,eAAO,0BAASN,UAAT,CAAoBE,IAApB,EAA0BC,OAA1B,EAAmCC,OAAnC,EAA4CH,KAA5C,CAAP;AACH;;AAED,aAASM,eAAT,CAAyBC,YAAzB,EAAuCC,CAAvC,EAA0C;AACtCC,WAAG,uCAAuCD,CAA1C,EAA6C,YAAW;AACpD,2BAAKE,MAAL,CAAYC,QAAZ,CAAqBJ,YAArB,EAAmC,OAAnC;AACA,gBAAIA,aAAaK,OAAjB,EAA0B;AACtB,+BAAKF,MAAL,CAAYC,QAAZ,CAAqBJ,YAArB,EAAmC,OAAnC;;AAEA,oBAAMP,QAAQO,aAAaP,KAA3B;AACA,oBAAMY,UAAUL,aAAaK,OAA7B;AACA,oBAAMC,gBAAgBN,aAAaO,KAAnC;;AAEA,oBAAMA,QAAQf,WAAWC,KAAX,EAAkBY,QAAQX,IAA1B,EAAgCW,QAAQV,OAAxC,CAAd;AACA,oBAAMa,YAAYD,MAAMb,IAAxB;AACA,oBAAMe,eAAeF,MAAMZ,OAA3B;AACA,+BAAKQ,MAAL,CAAYO,SAAZ,CAAsBF,SAAtB,EAAiCF,cAAcZ,IAA/C;AACA,oBAAIY,cAAcX,OAAd,KAA0BgB,SAA9B,EAAyC;AACrC,mCAAKR,MAAL,CAAYO,SAAZ,CAAsBD,YAAtB,EAAoCH,cAAcX,OAAlD;AACH;AACJ,aAdD,MAcO;AACH,+BAAKQ,MAAL,CAAYH,aAAaY,KAAzB;AACA;AACH;AACJ,SApBD;AAqBH;;AAEDC,aAAS,gBAAT,EAA2B,YAAW;AAClC,iCAAgBC,OAAhB,CAAwBf,eAAxB;AACH,KAFD","file":"../../../scripts/mocha/tests/rules_tests.js","sourcesContent":["import chai from \"chai\";\nimport RuleDefs from \"mvc/rules/rule-definitions\";\nimport SPEC_TEST_CASES from \"json-loader!yaml-loader!./rules_dsl_spec.yml\";\n\nconst RULES = RuleDefs.RULES;\n\nfunction applyRules(rules, data, sources) {\n    let columns = [];\n    if (data[0]) {\n        for (const index in data[0]) {\n            columns.push(\"new\");\n        }\n    }\n    return RuleDefs.applyRules(data, sources, columns, rules);\n}\n\nfunction itShouldConform(specTestCase, i) {\n    it(\"should pass conformance test case \" + i, function() {\n        chai.assert.property(specTestCase, \"rules\");\n        if (specTestCase.initial) {\n            chai.assert.property(specTestCase, \"final\");\n\n            const rules = specTestCase.rules;\n            const initial = specTestCase.initial;\n            const expectedFinal = specTestCase.final;\n\n            const final = applyRules(rules, initial.data, initial.sources);\n            const finalData = final.data;\n            const finalSources = final.sources;\n            chai.assert.deepEqual(finalData, expectedFinal.data);\n            if (expectedFinal.sources !== undefined) {\n                chai.assert.deepEqual(finalSources, expectedFinal.sources);\n            }\n        } else {\n            chai.assert(specTestCase.error);\n            // TODO: test these...\n        }\n    });\n}\n\ndescribe(\"Rules DSL Spec\", function() {\n    SPEC_TEST_CASES.forEach(itShouldConform);\n});\n"]}