{"version":3,"sources":["mvc/history/history-list.js"],"names":["Backbone","HistoryGridView","extend","initialize","grid_config","ajaxQueue","AjaxQueue","prototype","call","init_grid_elements","stop","fetchDetails","$","makeArray","$el","find","map","i","el","historyId","data","url","Galaxy","root","options","type","success","contentsStates","req","contents_states","stateHtml","state","stateCount","contentsActive","contents_active","deleted","hidden","html","nice_size","xhr","ajax","forEach","add","fn","start","_showCopyDialog","id","history","History","fetch","fail","alert","done","window","parent","currHistoryPanel","loadCurrentHistory","location","reload","add_operation","popup","operation","item","label","onclick","View","title","markViewAsLoading","action_id","active_tab","model","Model","get","param","params","set","response","render","grid","attributes","empty","append"],"mappings":"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","file":"../../../scripts/mvc/history/history-list.js","sourcesContent":["/** This class renders the grid list. */\nimport _l from \"utils/localization\";\nimport AjaxQueue from \"utils/ajax-queue\";\nimport Utils from \"utils/utils\";\nimport GridView from \"mvc/grid/grid-view\";\nimport HistoryModel from \"mvc/history/history-model\";\nimport historyCopyDialog from \"mvc/history/copy-dialog\";\nimport LoadingIndicator from \"ui/loading-indicator\";\nimport * as Backbone from \"backbone\";\n\n/* global $ */\n/* global Galaxy */\n\nvar HistoryGridView = GridView.extend({\n    initialize: function(grid_config) {\n        this.ajaxQueue = new AjaxQueue.AjaxQueue();\n        GridView.prototype.initialize.call(this, grid_config);\n    },\n\n    init_grid_elements: function() {\n        const ajaxQueue = this.ajaxQueue;\n        ajaxQueue.stop();\n        GridView.prototype.init_grid_elements.call(this);\n        const fetchDetails = $.makeArray(\n            this.$el.find(\".delayed-value-datasets_by_state\").map((i, el) => {\n                return () => {\n                    const historyId = $(el).data(\"id\");\n                    const url = `${\n                        Galaxy.root\n                    }api/histories/${historyId}?keys=nice_size,contents_active,contents_states`;\n                    const options = {};\n                    options.url = url;\n                    options.type = \"GET\";\n                    options.success = req => {\n                        const contentsStates = req.contents_states;\n                        let stateHtml = \"\";\n                        for (let state of [\"ok\", \"running\", \"queued\", \"new\", \"error\"]) {\n                            const stateCount = contentsStates[state];\n                            if (stateCount) {\n                                stateHtml += `<div class=\"count-box state-color-${state}\" title=\"Datasets in ${state} state\">${stateCount}</div> `;\n                            }\n                        }\n                        const contentsActive = req.contents_active;\n                        const deleted = contentsActive.deleted;\n                        if (deleted) {\n                            stateHtml += `<div class=\"count-box state-color-deleted\" title=\"Deleted datasets\">${deleted}</div> `;\n                        }\n                        const hidden = contentsActive.hidden;\n                        if (hidden) {\n                            stateHtml += `<div class=\"count-box state-color-hidden\" title=\"Hidden datasets\">${hidden}</div> `;\n                        }\n                        $(`.delayed-value-datasets_by_state[data-id='${historyId}']`).html(stateHtml);\n                        $(`.delayed-value-disk_size[data-id='${historyId}']`).html(req.nice_size);\n                    };\n                    var xhr = $.ajax(options);\n                    return xhr;\n                };\n            })\n        );\n        fetchDetails.forEach(fn => ajaxQueue.add(fn));\n        ajaxQueue.start();\n    },\n    _showCopyDialog: function(id) {\n        var history = new HistoryModel.History({ id: id });\n        history\n            .fetch()\n            .fail(() => {\n                alert(\"History could not be fetched. Please contact an administrator\");\n            })\n            .done(() => {\n                historyCopyDialog(history, {}).done(() => {\n                    if (window.parent && window.parent.Galaxy && window.parent.Galaxy.currHistoryPanel) {\n                        window.parent.Galaxy.currHistoryPanel.loadCurrentHistory();\n                    }\n                    window.location.reload(true);\n                });\n            });\n    },\n    /** Add an operation to the items menu */\n    add_operation: function(popup, operation, item) {\n        if (operation.label == \"Copy\") {\n            operation.onclick = id => {\n                this._showCopyDialog(id);\n            };\n        }\n        GridView.prototype.add_operation.call(this, popup, operation, item);\n    }\n});\n\nvar View = Backbone.View.extend({\n    title: _l(\"Histories\"),\n    initialize: function(options) {\n        LoadingIndicator.markViewAsLoading(this);\n\n        if (options.action_id == \"list_published\") {\n            this.active_tab = \"shared\";\n        } else if (options.action_id == \"list\") {\n            this.active_tab = \"user\";\n        }\n        this.model = new Backbone.Model();\n        Utils.get({\n            url: `${Galaxy.root}history/${options.action_id}?${$.param(Galaxy.params)}`,\n            success: response => {\n                this.model.set(response);\n                this.render();\n            }\n        });\n    },\n\n    render: function() {\n        var grid = new HistoryGridView(this.model.attributes);\n        this.$el.empty().append(grid.$el);\n    }\n});\n\nexport default {\n    View: View\n};\n"]}