{"version":3,"sources":["mvc/upload/upload-view.js"],"names":["Backbone","View","extend","options","ftp_upload_site","default_genome","DEFAULT_GENOME","default_extension","DEFAULT_EXTENSION","height","width","auto","AUTO_EXTENSION","list_extensions","list_genomes","initialize","merge","ui_button","onclick","e","preventDefault","show","onunload","percentage","model","get","setElement","$el","getUploadDatatypes","datatypes_disable_auto","getUploadGenomes","self","Galaxy","currHistoryPanel","window","setTimeout","current_user","user","id","modal","tabs","default_view","add","title","composite_view","collection_view","rule_based_view","body","closing_events","title_separator","currentHistory","currentFtp","toData","items","history_id","data","payload","tool_id","inputs","files","error_message","length","file_count","dbkey","file_type","index","it","set","prefix","push","name","file","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/upload/upload-view.js","sourcesContent":["import _l from \"utils/localization\";\n/** Upload app contains the upload progress button and upload modal, compiles model data for API request **/\nimport Utils from \"utils/utils\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport Tabs from \"mvc/ui/ui-tabs\";\nimport UploadUtils from \"mvc/upload/upload-utils\";\nimport UploadButton from \"mvc/upload/upload-button\";\nimport UploadViewDefault from \"mvc/upload/default/default-view\";\nimport UploadViewComposite from \"mvc/upload/composite/composite-view\";\nimport UploadViewCollection from \"mvc/upload/collection/collection-view\";\nimport UploadViewRuleBased from \"mvc/upload/collection/rules-input-view\";\n\nexport default Backbone.View.extend({\n    options: {\n        ftp_upload_site: \"n/a\",\n        default_genome: UploadUtils.DEFAULT_GENOME,\n        default_extension: UploadUtils.DEFAULT_EXTENSION,\n        height: 500,\n        width: 900,\n        auto: UploadUtils.AUTO_EXTENSION\n    },\n\n    // contains all available dataset extensions/types\n    list_extensions: [],\n\n    // contains all available genomes\n    list_genomes: [],\n\n    initialize: function(options) {\n        this.options = Utils.merge(options, this.options);\n\n        // create view for upload/progress button\n        this.ui_button = new UploadButton.View({\n            onclick: e => {\n                e.preventDefault();\n                this.show();\n            },\n            onunload: () => {\n                var percentage = this.ui_button.model.get(\"percentage\", 0);\n                if (percentage > 0 && percentage < 100) {\n                    return \"Several uploads are queued.\";\n                }\n            }\n        });\n\n        // set element to button view\n        this.setElement(this.ui_button.$el);\n\n        // load extensions\n        UploadUtils.getUploadDatatypes(\n            list_extensions => {\n                this.list_extensions = list_extensions;\n            },\n            this.options.datatypes_disable_auto,\n            this.options.auto\n        );\n\n        // load genomes\n        UploadUtils.getUploadGenomes(list_genomes => {\n            this.list_genomes = list_genomes;\n        }, this.default_genome);\n    },\n\n    /** Show/hide upload dialog */\n    show: function() {\n        var self = this;\n        if (!Galaxy.currHistoryPanel || !Galaxy.currHistoryPanel.model) {\n            window.setTimeout(() => {\n                self.show();\n            }, 500);\n            return;\n        }\n        this.current_user = Galaxy.user.id;\n        if (!this.modal) {\n            this.tabs = new Tabs.View();\n            this.default_view = new UploadViewDefault(this);\n            this.tabs.add({\n                id: \"regular\",\n                title: _l(\"Regular\"),\n                $el: this.default_view.$el\n            });\n            this.composite_view = new UploadViewComposite(this);\n            this.tabs.add({\n                id: \"composite\",\n                title: _l(\"Composite\"),\n                $el: this.composite_view.$el\n            });\n            this.collection_view = new UploadViewCollection(this);\n            this.tabs.add({\n                id: \"collection\",\n                title: _l(\"Collection\"),\n                $el: this.collection_view.$el\n            });\n            this.rule_based_view = new UploadViewRuleBased(this);\n            this.tabs.add({\n                id: \"rule-based\",\n                title: _l(\"Rule-based\"),\n                $el: this.rule_based_view.$el\n            });\n            this.modal = new Modal.View({\n                title: _l(\"Download from web or upload from disk\"),\n                body: this.tabs.$el,\n                height: this.options.height,\n                width: this.options.width,\n                closing_events: true,\n                title_separator: false\n            });\n        }\n        this.modal.show();\n    },\n\n    /** Refresh user and current history */\n    currentHistory: function() {\n        return this.current_user && Galaxy.currHistoryPanel.model.get(\"id\");\n    },\n\n    /** Get ftp configuration */\n    currentFtp: function() {\n        return this.current_user && this.options.ftp_upload_site;\n    },\n\n    /**\n     * Package API data from array of models\n     * @param{Array} items - Upload items/rows filtered from a collection\n     */\n    toData: function(items, history_id) {\n        // create dictionary for data submission\n        var data = {\n            payload: {\n                tool_id: \"upload1\",\n                history_id: history_id || this.currentHistory(),\n                inputs: {}\n            },\n            files: [],\n            error_message: null\n        };\n        // add upload tools input data\n        if (items && items.length > 0) {\n            var inputs = {\n                file_count: items.length,\n                dbkey: items[0].get(\"genome\", \"?\"),\n                // sometimes extension set to \"\" in automated testing after first upload of\n                // a session. https://github.com/galaxyproject/galaxy/issues/5169\n                file_type: items[0].get(\"extension\") || \"auto\"\n            };\n            for (var index in items) {\n                var it = items[index];\n                it.set(\"status\", \"running\");\n                if (it.get(\"file_size\") > 0) {\n                    var prefix = `files_${index}|`;\n                    inputs[`${prefix}type`] = \"upload_dataset\";\n                    inputs[`${prefix}space_to_tab`] = (it.get(\"space_to_tab\") && \"Yes\") || null;\n                    inputs[`${prefix}to_posix_lines`] = (it.get(\"to_posix_lines\") && \"Yes\") || null;\n                    inputs[`${prefix}dbkey`] = it.get(\"genome\", null);\n                    inputs[`${prefix}file_type`] = it.get(\"extension\", null);\n                    switch (it.get(\"file_mode\")) {\n                        case \"new\":\n                            inputs[`${prefix}url_paste`] = it.get(\"url_paste\");\n                            break;\n                        case \"ftp\":\n                            inputs[`${prefix}ftp_files`] = it.get(\"file_path\");\n                            break;\n                        case \"local\":\n                            data.files.push({\n                                name: `${prefix}file_data`,\n                                file: it.get(\"file_data\")\n                            });\n                    }\n                } else {\n                    data.error_message = \"Upload content incomplete.\";\n                    it.set(\"status\", \"error\");\n                    it.set(\"info\", data.error_message);\n                    break;\n                }\n            }\n            data.payload.inputs = JSON.stringify(inputs);\n        }\n        return data;\n    }\n});\n"]}