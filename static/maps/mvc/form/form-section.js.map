{"version":3,"sources":["mvc/form/form-section.js"],"names":["View","Backbone","extend","initialize","app","options","inputs","parameters","setElement","$","render","self","$el","empty","_","each","add","input","input_def","jQuery","id","uid","input_list","type","_addConditional","_addRepeat","_addSection","_addRow","test_param","textable","model","get","disabled","field","i","cases","sub_section","_append","addClass","set","selectedCase","data","matchCase","value","case_def","section_row","nonhidden","j","hidden","fadeIn","hide","trigger","block_index","repeat","title","min","max","onnew","create","sub_section_id","ondel","del","n_cache","size","cache","Math","default","hideOptions","input_element","label","name","help","portlet","cls","collapsible","collapsible_button","collapsed","expanded","append","html","on","input_id","length","expand","onchange","field_list","hide_label","text_value","collapsible_value","collapsible_preview","argument","color","style","backdrop","fixed","element_list","attr"],"mappings":"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","file":"../../../scripts/mvc/form/form-section.js","sourcesContent":["/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Portlet from \"mvc/ui/ui-portlet\";\nimport Repeat from \"mvc/form/form-repeat\";\nimport InputElement from \"mvc/form/form-input\";\nimport Parameters from \"mvc/form/form-parameters\";\nvar View = Backbone.View.extend({\n    initialize: function(app, options) {\n        this.app = app;\n        this.inputs = options.inputs;\n        this.parameters = new Parameters();\n        this.setElement($(\"<div/>\"));\n        this.render();\n    },\n\n    /** Render section view */\n    render: function() {\n        var self = this;\n        this.$el.empty();\n        _.each(this.inputs, input => {\n            self.add(input);\n        });\n    },\n\n    /** Add a new input element */\n    add: function(input) {\n        var input_def = jQuery.extend({}, input);\n        input_def.id = Utils.uid();\n        this.app.input_list[input_def.id] = input_def;\n        switch (input_def.type) {\n            case \"conditional\":\n                this._addConditional(input_def);\n                break;\n            case \"repeat\":\n                this._addRepeat(input_def);\n                break;\n            case \"section\":\n                this._addSection(input_def);\n                break;\n            default:\n                this._addRow(input_def);\n        }\n    },\n\n    /** Add a conditional block */\n    _addConditional: function(input_def) {\n        var self = this;\n        input_def.test_param.id = input_def.id;\n        input_def.test_param.textable = false;\n        this.app.model.get(\"sustain_conditionals\") && (input_def.test_param.disabled = true);\n        var field = this._addRow(input_def.test_param);\n        // set onchange event for test parameter\n        if (field.model) {\n            // add conditional sub sections\n            for (var i in input_def.cases) {\n                var sub_section = new View(this.app, {\n                    inputs: input_def.cases[i].inputs\n                });\n                this._append(sub_section.$el.addClass(\"ui-form-section\"), `${input_def.id}-section-${i}`);\n            }\n            field.model.set(\"onchange\", value => {\n                var selectedCase = self.app.data.matchCase(input_def, value);\n                for (var i in input_def.cases) {\n                    var case_def = input_def.cases[i];\n                    var section_row = self.$(`#${input_def.id}-section-${i}`);\n                    var nonhidden = false;\n                    for (var j in case_def.inputs) {\n                        if (!case_def.inputs[j].hidden) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if (i == selectedCase && nonhidden) {\n                        section_row.fadeIn(\"fast\");\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger(\"change\");\n            });\n            // trigger refresh on conditional input field after all input elements have been created\n            field.trigger(\"change\");\n        }\n    },\n\n    /** Add a repeat block */\n    _addRepeat: function(input_def) {\n        var self = this;\n        var block_index = 0;\n\n        // create repeat block element\n        var repeat = new Repeat.View({\n            title: input_def.title || \"Repeat\",\n            min: input_def.min,\n            max: input_def.max,\n            onnew: function() {\n                create(input_def.inputs);\n                self.app.trigger(\"change\");\n            }\n        });\n\n        // helper function to create new repeat blocks\n        function create(inputs) {\n            var sub_section_id = `${input_def.id}-section-${block_index++}`;\n            var sub_section = new View(self.app, { inputs: inputs });\n            repeat.add({\n                id: sub_section_id,\n                $el: sub_section.$el,\n                ondel: function() {\n                    repeat.del(sub_section_id);\n                    self.app.trigger(\"change\");\n                }\n            });\n        }\n\n        //\n        // add parsed/minimum number of repeat blocks\n        //\n        var n_cache = _.size(input_def.cache);\n        for (var i = 0; i < Math.max(Math.max(n_cache, input_def.min || 0), input_def.default || 0); i++) {\n            create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n        }\n\n        // hide options\n        this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n        // create input field wrapper\n        var input_element = new InputElement(this.app, {\n            label: input_def.title || input_def.name,\n            help: input_def.help,\n            field: repeat\n        });\n        this._append(input_element.$el, input_def.id);\n    },\n\n    /** Add a customized section */\n    _addSection: function(input_def) {\n        var portlet = new Portlet.View({\n            title: input_def.title || input_def.name,\n            cls: \"ui-portlet-section\",\n            collapsible: true,\n            collapsible_button: true,\n            collapsed: !input_def.expanded\n        });\n        portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n        portlet.append(\n            $(\"<div/>\")\n                .addClass(\"ui-form-info\")\n                .html(input_def.help)\n        );\n        this.app.on(\"expand\", input_id => {\n            portlet.$(`#${input_id}`).length > 0 && portlet.expand();\n        });\n        this._append(portlet.$el, input_def.id);\n    },\n\n    /** Add a single input field element */\n    _addRow: function(input_def) {\n        var self = this;\n        var id = input_def.id;\n        input_def.onchange =\n            input_def.onchange ||\n            (() => {\n                self.app.trigger(\"change\", id);\n            });\n        var field = this.parameters.create(input_def);\n        this.app.field_list[id] = field;\n        var input_element = new InputElement(this.app, {\n            name: input_def.name,\n            label: input_def.hide_label ? \"\" : input_def.label || input_def.name,\n            value: input_def.value,\n            text_value: input_def.text_value,\n            collapsible_value: input_def.collapsible_value,\n            collapsible_preview: input_def.collapsible_preview,\n            help: input_def.help,\n            argument: input_def.argument,\n            disabled: input_def.disabled,\n            color: input_def.color,\n            style: input_def.style,\n            backdrop: input_def.backdrop,\n            hidden: input_def.hidden,\n            fixed: input_def.fixed,\n            field: field\n        });\n        this.app.element_list[id] = input_element;\n        this._append(input_element.$el, input_def.id);\n        return field;\n    },\n\n    /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n    _append: function($el, id) {\n        this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n    }\n});\n\nexport default {\n    View: View\n};\n"]}