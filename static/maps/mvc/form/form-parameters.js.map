{"version":3,"sources":["mvc/form/form-parameters.js"],"names":["Backbone","Model","extend","types","text","password","select","data_column","genomebuild","data","data_collection","integer","float","boolean","drill_down","color","hidden","hidden_data","baseurl","library_data","ftpfile","upload","rules","genomespacefile","create","input_def","fieldClass","type","field","call","options","_fieldSelect","_fieldText","Galaxy","emit","debug","value","undefined","_fieldData","View","id","extensions","optional","multiple","flavor","onchange","is_workflow","error_text","_","each","push","label","option","classes","checkboxes","Checkbox","radio","Radio","radiobutton","RadioButton","SelectClass","display","Select","readonly","individual","searchable","textable","TextSelect","_fieldDrilldown","Drilldown","area","isEmpty","$","isArray","str_value","i","String","Input","placeholder","datalist","_fieldSlider","Slider","precise","min","max","_fieldHidden","Hidden","info","_fieldBoolean","_fieldColor","_fieldLibrary","_fieldFtp","_fieldGenomeSpace","_fieldRulesEdit","target","_fieldUpload","Upload"],"mappings":"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","file":"../../../scripts/mvc/form/form-parameters.js","sourcesContent":["/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport SelectContent from \"mvc/ui/ui-select-content\";\nimport SelectLibrary from \"mvc/ui/ui-select-library\";\nimport SelectFtp from \"mvc/ui/ui-select-ftp\";\nimport SelectGenomeSpace from \"mvc/ui/ui-select-genomespace\";\nimport RulesEdit from \"mvc/ui/ui-rules-edit\";\nimport ColorPicker from \"mvc/ui/ui-color-picker\";\n// create form view\nexport default Backbone.Model.extend({\n    /** Available parameter types */\n    types: {\n        text: \"_fieldText\",\n        password: \"_fieldText\",\n        select: \"_fieldSelect\",\n        data_column: \"_fieldSelect\",\n        genomebuild: \"_fieldSelect\",\n        data: \"_fieldData\",\n        data_collection: \"_fieldData\",\n        integer: \"_fieldSlider\",\n        float: \"_fieldSlider\",\n        boolean: \"_fieldBoolean\",\n        drill_down: \"_fieldDrilldown\",\n        color: \"_fieldColor\",\n        hidden: \"_fieldHidden\",\n        hidden_data: \"_fieldHidden\",\n        baseurl: \"_fieldHidden\",\n        library_data: \"_fieldLibrary\",\n        ftpfile: \"_fieldFtp\",\n        upload: \"_fieldUpload\",\n        rules: \"_fieldRulesEdit\",\n        genomespacefile: \"_fieldGenomeSpace\"\n    },\n\n    /** Returns an input field for a given field type */\n    create: function(input_def) {\n        var fieldClass = this.types[input_def.type];\n        var field = typeof this[fieldClass] === \"function\" ? this[fieldClass].call(this, input_def) : null;\n        if (!field) {\n            field = input_def.options ? this._fieldSelect(input_def) : this._fieldText(input_def);\n            Galaxy.emit.debug(\"form-parameters::_addRow()\", `Auto matched field type (${input_def.type}).`);\n        }\n        if (input_def.value === undefined) {\n            input_def.value = null;\n        }\n        field.value(input_def.value);\n        return field;\n    },\n\n    /** Data input field */\n    _fieldData: function(input_def) {\n        return new SelectContent.View({\n            id: `field-${input_def.id}`,\n            extensions: input_def.extensions,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            type: input_def.type,\n            flavor: input_def.flavor,\n            data: input_def.options,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Select/Checkbox/Radio options field */\n    _fieldSelect: function(input_def) {\n        // show text field e.g. in workflow editor\n        if (input_def.is_workflow) {\n            return this._fieldText(input_def);\n        }\n\n        // customize properties\n        if (input_def.type == \"data_column\") {\n            input_def.error_text = \"Missing columns in referenced dataset.\";\n        }\n\n        // identify available options\n        var data = input_def.data;\n        if (!data) {\n            data = [];\n            _.each(input_def.options, option => {\n                data.push({ label: option[0], value: option[1] });\n            });\n        }\n\n        // pick selection display\n        var classes = {\n            checkboxes: Ui.Checkbox,\n            radio: Ui.Radio,\n            radiobutton: Ui.RadioButton\n        };\n        var SelectClass = classes[input_def.display] || Ui.Select;\n        var select = new SelectClass.View({\n            id: `field-${input_def.id}`,\n            data: data,\n            display: input_def.display,\n            error_text: input_def.error_text || \"No options available\",\n            readonly: input_def.readonly,\n            multiple: input_def.multiple,\n            optional: input_def.optional,\n            onchange: input_def.onchange,\n            individual: input_def.individual,\n            searchable: input_def.flavor !== \"workflow\"\n        });\n        return input_def.textable ? new Ui.TextSelect({ select: select }) : select;\n    },\n\n    /** Drill down options field */\n    _fieldDrilldown: function(input_def) {\n        // show text field e.g. in workflow editor\n        if (input_def.is_workflow) {\n            return this._fieldText(input_def);\n        }\n\n        // create drill down field\n        return new Ui.Drilldown.View({\n            id: `field-${input_def.id}`,\n            data: input_def.options,\n            display: input_def.display,\n            optional: input_def.optional,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Text input field */\n    _fieldText: function(input_def) {\n        // field replaces e.g. a select field\n        if (input_def.options && input_def.data) {\n            input_def.area = input_def.multiple;\n            if (Utils.isEmpty(input_def.value)) {\n                input_def.value = null;\n            } else {\n                if ($.isArray(input_def.value)) {\n                    var str_value = \"\";\n                    for (var i in input_def.value) {\n                        str_value += String(input_def.value[i]);\n                        if (!input_def.multiple) {\n                            break;\n                        }\n                        str_value += \"\\n\";\n                    }\n                    input_def.value = str_value;\n                }\n            }\n        }\n        // create input element\n        return new Ui.Input({\n            id: `field-${input_def.id}`,\n            type: input_def.type,\n            area: input_def.area,\n            readonly: input_def.readonly,\n            placeholder: input_def.placeholder,\n            datalist: input_def.datalist,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Slider field */\n    _fieldSlider: function(input_def) {\n        return new Ui.Slider.View({\n            id: `field-${input_def.id}`,\n            precise: input_def.type == \"float\",\n            is_workflow: input_def.is_workflow,\n            min: input_def.min,\n            max: input_def.max,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Hidden field */\n    _fieldHidden: function(input_def) {\n        return new Ui.Hidden({\n            id: `field-${input_def.id}`,\n            info: input_def.info\n        });\n    },\n\n    /** Boolean field */\n    _fieldBoolean: function(input_def) {\n        return new Ui.RadioButton.View({\n            id: `field-${input_def.id}`,\n            data: [{ label: \"Yes\", value: \"true\" }, { label: \"No\", value: \"false\" }],\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Color picker field */\n    _fieldColor: function(input_def) {\n        return new ColorPicker({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Library dataset field */\n    _fieldLibrary: function(input_def) {\n        return new SelectLibrary.View({\n            id: `field-${input_def.id}`,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** FTP file field */\n    _fieldFtp: function(input_def) {\n        return new SelectFtp.View({\n            id: `field-${input_def.id}`,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** GenomeSpace file select field\n     */\n    _fieldGenomeSpace: function(input_def) {\n        return new SelectGenomeSpace.View({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange\n        });\n    },\n\n    _fieldRulesEdit: function(input_def) {\n        return new RulesEdit.View({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange,\n            target: input_def.target\n        });\n    },\n\n    /** Upload file field */\n    _fieldUpload: function(input_def) {\n        return new Ui.Upload({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange\n        });\n    }\n});\n"]}