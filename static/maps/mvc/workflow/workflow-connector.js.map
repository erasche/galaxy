{"version":3,"sources":["mvc/workflow/workflow-connector.js"],"names":["Connector","handle1","handle2","canvas","dragging","inner_color","outer_color","connect","$","extend","prototype","t1","t2","destroy","disconnect","remove","destroyIfInvalid","attachable","redraw","startRibbon","isMappedOver","endRibbon","canvasClass","canvas_container","document","createElement","append","style","zIndex","setAttribute","element","getAttribute","relativeLeft","e","offset","left","relativeTop","top","start_x","start_y","end_x","end_y","canvas_extra","canvas_min_x","Math","min","canvas_max_x","max","canvas_min_y","canvas_max_y","cp_shift","abs","canvas_left","canvas_top","canvas_width","canvas_height","c","getContext","start_offsets","end_offsets","num_offsets","connector","i","inner_width","outer_width","length","draw_outlined_curve","offset_start","offset_end","lineCap","strokeStyle","lineWidth","beginPath","moveTo","bezierCurveTo","stroke"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-connector.js","sourcesContent":["function Connector(handle1, handle2) {\n    this.canvas = null;\n    this.dragging = false;\n    this.inner_color = \"#FFFFFF\";\n    this.outer_color = \"#D8B365\";\n    if (handle1 && handle2) {\n        this.connect(handle1, handle2);\n    }\n}\n$.extend(Connector.prototype, {\n    connect: function(t1, t2) {\n        this.handle1 = t1;\n        if (this.handle1) {\n            this.handle1.connect(this);\n        }\n        this.handle2 = t2;\n        if (this.handle2) {\n            this.handle2.connect(this);\n        }\n    },\n    destroy: function() {\n        if (this.handle1) {\n            this.handle1.disconnect(this);\n        }\n        if (this.handle2) {\n            this.handle2.disconnect(this);\n        }\n        $(this.canvas).remove();\n    },\n    destroyIfInvalid: function() {\n        if (this.handle1 && this.handle2 && !this.handle2.attachable(this.handle1)) {\n            this.destroy();\n        }\n    },\n    redraw: function() {\n        const handle1 = this.handle1;\n        const handle2 = this.handle2;\n        const startRibbon = handle1 && handle1.isMappedOver();\n        const endRibbon = handle2 && handle2.isMappedOver();\n        const canvasClass = `${startRibbon ? \"start-ribbon\" : \"\"} ${endRibbon ? \"end-ribbon\" : \"\"}`;\n        var canvas_container = $(\"#canvas-container\");\n        if (!this.canvas) {\n            this.canvas = document.createElement(\"canvas\");\n            canvas_container.append($(this.canvas));\n            if (this.dragging) {\n                this.canvas.style.zIndex = \"300\";\n            }\n        }\n        this.canvas.setAttribute(\n            \"handle1-id\",\n            handle1 && handle1.element.getAttribute ? handle1.element.getAttribute(\"id\") : \"\"\n        );\n        this.canvas.setAttribute(\n            \"handle2-id\",\n            handle2 && handle2.element.getAttribute ? handle2.element.getAttribute(\"id\") : \"\"\n        );\n        var relativeLeft = e => $(e).offset().left - canvas_container.offset().left;\n        var relativeTop = e => $(e).offset().top - canvas_container.offset().top;\n        if (!handle1 || !handle2) {\n            return;\n        }\n        // Find the position of each handle\n        var start_x = relativeLeft(handle1.element) + 5;\n        var start_y = relativeTop(handle1.element) + 5;\n        var end_x = relativeLeft(handle2.element) + 5;\n        var end_y = relativeTop(handle2.element) + 5;\n        // Calculate canvas area\n        var canvas_extra = 100;\n        var canvas_min_x = Math.min(start_x, end_x);\n        var canvas_max_x = Math.max(start_x, end_x);\n        var canvas_min_y = Math.min(start_y, end_y);\n        var canvas_max_y = Math.max(start_y, end_y);\n        var cp_shift = Math.min(Math.max(Math.abs(canvas_max_y - canvas_min_y) / 2, 100), 300);\n        var canvas_left = canvas_min_x - canvas_extra;\n        var canvas_top = canvas_min_y - canvas_extra;\n        var canvas_width = canvas_max_x - canvas_min_x + 2 * canvas_extra;\n        var canvas_height = canvas_max_y - canvas_min_y + 2 * canvas_extra;\n        // Place the canvas\n        this.canvas.style.left = `${canvas_left}px`;\n        this.canvas.style.top = `${canvas_top}px`;\n        this.canvas.setAttribute(\"width\", canvas_width);\n        this.canvas.setAttribute(\"height\", canvas_height);\n        this.canvas.setAttribute(\"class\", canvasClass);\n        // Adjust points to be relative to the canvas\n        start_x -= canvas_left;\n        start_y -= canvas_top;\n        end_x -= canvas_left;\n        end_y -= canvas_top;\n\n        // Draw the line\n\n        var c = this.canvas.getContext(\"2d\");\n\n        var start_offsets = null;\n        var end_offsets = null;\n        var num_offsets = 1;\n        if (startRibbon) {\n            var start_offsets = [-6, -3, 0, 3, 6];\n            num_offsets = 5;\n        } else {\n            var start_offsets = [0];\n        }\n        if (endRibbon) {\n            var end_offsets = [-6, -3, 0, 3, 6];\n            num_offsets = 5;\n        } else {\n            var end_offsets = [0];\n        }\n        var connector = this;\n        for (var i = 0; i < num_offsets; i++) {\n            var inner_width = 5;\n            var outer_width = 7;\n            if (start_offsets.length > 1 || end_offsets.length > 1) {\n                // We have a multi-run, using many lines, make them small.\n                inner_width = 1;\n                outer_width = 3;\n            }\n            connector.draw_outlined_curve(\n                start_x,\n                start_y,\n                end_x,\n                end_y,\n                cp_shift,\n                inner_width,\n                outer_width,\n                start_offsets[i % start_offsets.length],\n                end_offsets[i % end_offsets.length]\n            );\n        }\n    },\n    draw_outlined_curve: function(\n        start_x,\n        start_y,\n        end_x,\n        end_y,\n        cp_shift,\n        inner_width,\n        outer_width,\n        offset_start,\n        offset_end\n    ) {\n        var offset_start = offset_start || 0;\n        var offset_end = offset_end || 0;\n        var c = this.canvas.getContext(\"2d\");\n        c.lineCap = \"round\";\n        c.strokeStyle = this.outer_color;\n        c.lineWidth = outer_width;\n        c.beginPath();\n        c.moveTo(start_x, start_y + offset_start);\n        c.bezierCurveTo(\n            start_x + cp_shift,\n            start_y + offset_start,\n            end_x - cp_shift,\n            end_y + offset_end,\n            end_x,\n            end_y + offset_end\n        );\n        c.stroke();\n        // Inner line\n        c.strokeStyle = this.inner_color;\n        c.lineWidth = inner_width;\n        c.beginPath();\n        c.moveTo(start_x, start_y + offset_start);\n        c.bezierCurveTo(\n            start_x + cp_shift,\n            start_y + offset_start,\n            end_x - cp_shift,\n            end_y + offset_end,\n            end_x,\n            end_y + offset_end\n        );\n        c.stroke();\n    }\n});\nexport default Connector;\n"]}