{"version":3,"sources":["mvc/visualization/visualization-model.js"],"names":["Backbone","_","Visualization","Model","extend","defaults","config","urlRoot","apiUrl","Galaxy","root","initialize","data","isObject","_setUpListeners","set","key","val","oldConfig","get","clone","prototype","call","toString","idAndTitle","VisualizationCollection","Collection","model","url","models","options","collection","map","existing","id","merged","toJSON","historyId","length","join"],"mappings":"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","file":"../../../scripts/mvc/visualization/visualization-model.js","sourcesContent":["import * as Backbone from \"backbone\";\nimport * as _ from \"underscore\";\n\n/* global Galaxy */\n\n//==============================================================================\n/** @class Model for a saved Galaxy visualization.\n *\n *  @augments Backbone.Model\n *  @constructs\n */\nexport var Visualization = Backbone.Model.extend(\n    /** @lends Visualization.prototype */ {\n        ///** logger used to record this.log messages, commonly set to console */\n        //// comment this out to suppress log output\n        //logger              : console,\n\n        /** default attributes for a model */\n        defaults: {\n            config: {}\n        },\n\n        /** override urlRoot to handle prefix */\n        urlRoot: function() {\n            var apiUrl = \"api/visualizations\";\n            return Galaxy.root + apiUrl;\n        },\n\n        /** Set up the model, determine if accessible, bind listeners\n         *  @see Backbone.Model#initialize\n         */\n        initialize: function(data) {\n            //this.log( this + '.initialize', data, this.attributes );\n\n            // munge config sub-object here since bbone won't handle defaults with this\n            if (_.isObject(data.config) && _.isObject(this.defaults.config)) {\n                _.defaults(data.config, this.defaults.config);\n            }\n\n            this._setUpListeners();\n        },\n\n        /** set up any event listeners\n         */\n        _setUpListeners: function() {\n            //this.on( 'change', function(){\n            //    console.info( 'change:', arguments );\n            //});\n        },\n\n        // ........................................................................ config\n        /** override set to properly allow update and trigger change when setting the sub-obj 'config' */\n        set: function(key, val) {\n            //TODO: validate config is object\n            if (key === \"config\") {\n                var oldConfig = this.get(\"config\");\n                // extend if already exists (is this correct behavior? no way to eliminate keys or reset entirely)\n                // clone in order to trigger change (diff. obj ref)\n                if (_.isObject(oldConfig)) {\n                    val = _.extend(_.clone(oldConfig), val);\n                }\n            }\n            Backbone.Model.prototype.set.call(this, key, val);\n            return this;\n        },\n\n        // ........................................................................ misc\n        /** String representation */\n        toString: function() {\n            var idAndTitle = this.get(\"id\") || \"\";\n            if (this.get(\"title\")) {\n                idAndTitle += `:${this.get(\"title\")}`;\n            }\n            return `Visualization(${idAndTitle})`;\n        }\n    }\n);\n\n//==============================================================================\n/** @class Backbone collection of visualization models\n *\n *  @constructs\n */\nexport var VisualizationCollection = Backbone.Collection.extend(\n    /** @lends VisualizationCollection.prototype */ {\n        model: Visualization,\n\n        ///** logger used to record this.log messages, commonly set to console */\n        //// comment this out to suppress log output\n        //logger              : console,\n\n        url: function() {\n            return `${Galaxy.root}api/visualizations`;\n        },\n\n        /** Set up.\n         *  @see Backbone.Collection#initialize\n         */\n        initialize: function(models, options) {\n            options = options || {};\n            //this._setUpListeners();\n        },\n\n        //_setUpListeners : function(){\n        //},\n\n        // ........................................................................ common queries\n        // ........................................................................ ajax\n        // ........................................................................ misc\n        set: function(models, options) {\n            // arrrrrrrrrrrrrrrrrg...\n            // override to get a correct/smarter merge when incoming data is partial (e.g. stupid backbone)\n            //  w/o this partial models from the server will fill in missing data with model defaults\n            //  and overwrite existing data on the client\n            // see Backbone.Collection.set and _prepareModel\n            var collection = this;\n            models = _.map(models, model => {\n                var existing = collection.get(model.id);\n                if (!existing) {\n                    return model;\n                }\n\n                // merge the models _BEFORE_ calling the superclass version\n                var merged = existing.toJSON();\n                _.extend(merged, model);\n                return merged;\n            });\n            // now call superclass when the data is filled\n            Backbone.Collection.prototype.set.call(this, models, options);\n        },\n\n        /** String representation. */\n        toString: function() {\n            return [\"VisualizationCollection(\", [this.historyId, this.length].join(), \")\"].join(\"\");\n        }\n    }\n);\n"]}