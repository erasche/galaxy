{"version":3,"sources":["mvc/visualization/chart/views/menu.js"],"names":["Backbone","View","extend","initialize","app","model","Model","visible","execute_button","ButtonIcon","icon","tooltip","onclick","chart","trigger","export_button","ButtonMenu","addMenu","key","title","_wait","createPNG","$el","viewer","get","error","message","update","err","status","createSVG","modal","show","body","buttons","Cancel","hide","Continue","createPDF","left_button","set","window","dispatchEvent","Event","right_button","save_button","save","setElement","b","append","listenTo","render","plugin","specs","confirm","exports","collection","each","indexOf","callback","deferred","ready"],"mappings":"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","file":"../../../../../scripts/mvc/visualization/chart/views/menu.js","sourcesContent":["/** This class renders the chart menu options. */\nimport Ui from \"mvc/ui/ui-misc\";\nimport Screenshot from \"mvc/visualization/chart/components/screenshot\";\nimport Utils from \"utils/utils\";\n\nexport default Backbone.View.extend({\n    initialize: function(app) {\n        this.app = app;\n        this.model = new Backbone.Model({ visible: true });\n        this.execute_button = new Ui.ButtonIcon({\n            icon: \"fa-check-square\",\n            tooltip: \"Confirm\",\n            onclick: () => {\n                app.chart.trigger(\"redraw\", true);\n            }\n        });\n        this.export_button = new Ui.ButtonMenu({\n            icon: \"fa-camera\",\n            tooltip: \"Export\"\n        });\n        this.export_button.addMenu({\n            key: \"png\",\n            title: \"Save as PNG\",\n            icon: \"fa-file\",\n            onclick: () => {\n                this._wait(app.chart, () => {\n                    Screenshot.createPNG({\n                        $el: app.viewer.$el,\n                        title: app.chart.get(\"title\"),\n                        error: err => {\n                            app.message.update({ message: err, status: \"danger\" });\n                        }\n                    });\n                });\n            }\n        });\n        this.export_button.addMenu({\n            key: \"svg\",\n            title: \"Save as SVG\",\n            icon: \"fa-file-text-o\",\n            onclick: () => {\n                this._wait(app.chart, () => {\n                    Screenshot.createSVG({\n                        $el: app.viewer.$el,\n                        title: app.chart.get(\"title\"),\n                        error: err => {\n                            app.message.update({ message: err, status: \"danger\" });\n                        }\n                    });\n                });\n            }\n        });\n        this.export_button.addMenu({\n            key: \"pdf\",\n            title: \"Save as PDF\",\n            icon: \"fa-file-o\",\n            onclick: () => {\n                app.modal.show({\n                    title: \"Send visualization data for PDF creation\",\n                    body:\n                        \"Galaxy does not provide integrated PDF export scripts. You may click 'Continue' to create the PDF by using a 3rd party service (https://export.highcharts.com).\",\n                    buttons: {\n                        Cancel: () => {\n                            app.modal.hide();\n                        },\n                        Continue: () => {\n                            app.modal.hide();\n                            this._wait(app.chart, () => {\n                                Screenshot.createPDF({\n                                    $el: app.viewer.$el,\n                                    title: app.chart.get(\"title\"),\n                                    error: err => {\n                                        app.message.update({ message: err, status: \"danger\" });\n                                    }\n                                });\n                            });\n                        }\n                    }\n                });\n            }\n        });\n        this.left_button = new Ui.ButtonIcon({\n            icon: \"fa-angle-double-left\",\n            tooltip: \"Show\",\n            onclick: () => {\n                this.model.set(\"visible\", true);\n                window.dispatchEvent(new Event(\"resize\"));\n            }\n        });\n        this.right_button = new Ui.ButtonIcon({\n            icon: \"fa-angle-double-right\",\n            tooltip: \"Hide\",\n            onclick: () => {\n                this.model.set(\"visible\", false);\n                window.dispatchEvent(new Event(\"resize\"));\n            }\n        });\n        this.save_button = new Ui.ButtonIcon({\n            icon: \"fa-save\",\n            tooltip: \"Save\",\n            onclick: () => {\n                if (app.chart.get(\"title\")) {\n                    app.message.update({\n                        message: `Saving '${app.chart.get(\n                            \"title\"\n                        )}'. It will appear in the list of 'Saved Visualizations'.`,\n                        status: \"success\"\n                    });\n                    app.chart.save({\n                        error: () => {\n                            app.message.update({\n                                message: \"Could not save visualization.\",\n                                status: \"danger\"\n                            });\n                        }\n                    });\n                } else {\n                    app.message.update({\n                        message: \"Please provide a name.\",\n                        status: \"danger\"\n                    });\n                }\n            }\n        });\n        this.buttons = [this.left_button, this.right_button, this.execute_button, this.export_button, this.save_button];\n        this.setElement(\"<div/>\");\n        for (let b of this.buttons) {\n            this.$el.append(b.$el);\n        }\n        this.listenTo(this.model, \"change\", () => this.render());\n        this.render();\n    },\n\n    render: function() {\n        var visible = this.model.get(\"visible\");\n        this.app.$el[visible ? \"removeClass\" : \"addClass\"](\"charts-fullscreen\");\n        this.execute_button.model.set(\"visible\", visible && !!this.app.chart.plugin.specs.confirm);\n        this.save_button.model.set(\"visible\", visible);\n        this.export_button.model.set(\"visible\", visible);\n        this.right_button.model.set(\"visible\", visible);\n        this.left_button.model.set(\"visible\", !visible);\n        var exports = this.app.chart.plugin.specs.exports || [];\n        this.export_button.collection.each(model => {\n            model.set(\"visible\", exports.indexOf(model.get(\"key\")) !== -1);\n        });\n    },\n\n    _wait: function(chart, callback) {\n        if (this.app.deferred.ready()) {\n            callback();\n        } else {\n            this.app.message.update({\n                message: \"Your visualization is currently being processed. Please wait and try again.\"\n            });\n        }\n    }\n});\n"]}