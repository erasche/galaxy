{"version":3,"sources":["mvc/visualization/chart/views/groups.js"],"names":["GroupView","Backbone","View","extend","initialize","app","options","self","deferred","chart","group","setElement","$","listenTo","render","inputs","clone","plugin","groups","dataset_id","get","state","execute","process","url","Galaxy","root","cache","success","dataset","data_columns","visitInputs","input","prefixed","type","columns","is_auto","push","label","value","is_zero","meta","metadata_column_types","key","indexOf","is_numeric","is_label","parseInt","data","model_value","undefined","hidden","name","form","cls","onchange","set","create","trigger","$el","empty","append","resolve","repeat","title","title_new","min","onnew","add","id","uid","del","delAll","ondel","remove","_","size","show","hide"],"mappings":"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","file":"../../../../../scripts/mvc/visualization/chart/views/groups.js","sourcesContent":["/** This class renders the chart data selection form with repeats. */\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Form from \"mvc/form/form-view\";\nimport Repeat from \"mvc/form/form-repeat\";\nimport FormData from \"mvc/form/form-data\";\nvar GroupView = Backbone.View.extend({\n    initialize: function(app, options) {\n        var self = this;\n        this.deferred = app.deferred;\n        this.chart = app.chart;\n        this.group = options.group;\n        this.setElement($(\"<div/>\"));\n        this.listenTo(this.chart, \"change:dataset_id\", function() {\n            self.render();\n        });\n        this.render();\n    },\n    render: function() {\n        var self = this;\n        var inputs = Utils.clone(this.chart.plugin.groups) || [];\n        var dataset_id = this.chart.get(\"dataset_id\");\n        if (dataset_id) {\n            this.chart.state(\"wait\", \"Loading metadata...\");\n            this.deferred.execute(function(process) {\n                Utils.get({\n                    url: Galaxy.root + \"api/datasets/\" + dataset_id,\n                    cache: true,\n                    success: function(dataset) {\n                        var data_columns = {};\n                        FormData.visitInputs(inputs, function(input, prefixed) {\n                            if (input.type == \"data_column\") {\n                                data_columns[prefixed] = Utils.clone(input);\n                                var columns = [];\n                                if (input.is_auto) {\n                                    columns.push({ label: \"Column: Row Number\", value: \"auto\" });\n                                }\n                                if (input.is_zero) {\n                                    columns.push({ label: \"Column: None\", value: \"zero\" });\n                                }\n                                var meta = dataset.metadata_column_types;\n                                for (var key in meta) {\n                                    if (\n                                        ([\"int\", \"float\"].indexOf(meta[key]) != -1 && input.is_numeric) ||\n                                        input.is_label\n                                    ) {\n                                        columns.push({ label: \"Column: \" + (parseInt(key) + 1), value: key });\n                                    }\n                                }\n                                input.data = columns;\n                            }\n                            var model_value = self.group.get(prefixed);\n                            if (model_value !== undefined && !input.hidden) {\n                                input.value = model_value;\n                            }\n                        });\n                        inputs.push({\n                            name: \"__data_columns\",\n                            type: \"hidden\",\n                            hidden: true,\n                            value: data_columns\n                        });\n                        self.chart.state(\"ok\", \"Metadata initialized...\");\n                        self.form = new Form({\n                            inputs: inputs,\n                            cls: \"ui-portlet-plain\",\n                            onchange: function() {\n                                self.group.set(self.form.data.create());\n                                self.chart.set(\"modified\", true);\n                                self.chart.trigger(\"redraw\");\n                            }\n                        });\n                        self.group.set(self.form.data.create());\n                        self.$el.empty().append(self.form.$el);\n                        process.resolve();\n                        self.chart.trigger(\"redraw\");\n                    }\n                });\n            });\n        }\n    }\n});\n\nexport default Backbone.View.extend({\n    initialize: function(app) {\n        var self = this;\n        this.app = app;\n        this.chart = app.chart;\n        this.repeat = new Repeat.View({\n            title: \"Data series\",\n            title_new: \"Data series\",\n            min: 1,\n            onnew: function() {\n                self.chart.groups.add({ id: Utils.uid() });\n            }\n        });\n        this.setElement($(\"<div/>\").append(this.repeat.$el));\n        this.listenTo(this.chart.groups, \"remove\", function(group) {\n            self.repeat.del(group.id);\n            self.chart.trigger(\"redraw\");\n        });\n        this.listenTo(this.chart.groups, \"reset\", function() {\n            self.repeat.delAll();\n        });\n        this.listenTo(this.chart.groups, \"add\", function(group) {\n            self.repeat.add({\n                id: group.id,\n                cls: \"ui-portlet-panel\",\n                $el: new GroupView(self.app, { group: group }).$el,\n                ondel: function() {\n                    self.chart.groups.remove(group);\n                }\n            });\n        });\n    },\n    render: function() {\n        if (_.size(this.chart.plugin.groups) > 0) {\n            this.repeat.$el.show();\n        } else {\n            this.repeat.$el.hide();\n        }\n    }\n});\n"]}