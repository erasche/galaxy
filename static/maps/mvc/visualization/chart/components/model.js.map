{"version":3,"sources":["mvc/visualization/chart/components/model.js"],"names":["Backbone","Model","extend","defaults","title","type","date","state","state_info","modified","dataset_id","dataset_id_job","initialize","options","viz_options","groups","Collection","settings","visualization_id","visualization_name","chart_dict","console","debug","reset","clear","set","add","id","uid","value","info","trigger","serialize","d","attributes","each","group","push","save","self","viz","undefined","get","config","then","response","success","error","fail","load","chart_parsed"],"mappings":"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","file":"../../../../../scripts/mvc/visualization/chart/components/model.js","sourcesContent":["import * as Backbone from \"backbone\";\nimport Utils from \"utils/utils\";\nimport { Visualization } from \"mvc/visualization/visualization-model\";\nexport default Backbone.Model.extend({\n    defaults: {\n        title: \"\",\n        type: \"\",\n        date: null,\n        state: \"\",\n        state_info: \"\",\n        modified: true,\n        dataset_id: \"\",\n        dataset_id_job: null\n    },\n\n    initialize: function(options, viz_options) {\n        this.groups = new Backbone.Collection();\n        this.settings = new Backbone.Model();\n        this.visualization_id = viz_options.visualization_id;\n        this.visualization_name = viz_options.visualization_name;\n        this.dataset_id = viz_options.dataset_id;\n        this.chart_dict = viz_options.chart_dict;\n        console.debug(\"model::initialize() - Initialized with configuration:\");\n        console.debug(viz_options);\n    },\n\n    reset: function() {\n        this.clear().set({\n            title: \"New Chart\",\n            dataset_id: this.dataset_id\n        });\n        this.settings.clear();\n        this.groups.reset();\n        this.groups.add({ id: Utils.uid() });\n    },\n\n    state: function(value, info) {\n        this.set({ state: value, state_info: info });\n        this.trigger(\"set:state\");\n        console.debug(\"model::state() - \" + info + \" (\" + value + \")\");\n    },\n\n    /** Create chart dictionary */\n    serialize: function() {\n        var d = {\n            attributes: this.attributes,\n            settings: this.settings.attributes,\n            groups: []\n        };\n        this.groups.each(function(group) {\n            d.groups.push(group.attributes);\n        });\n        return d;\n    },\n\n    /** Pack and save nested chart model */\n    save: function(options) {\n        var self = this;\n        options = options || {};\n        this.chart_dict = this.serialize();\n        var viz = new Visualization({\n            id: this.visualization_id || undefined,\n            type: this.visualization_name,\n            title: this.get(\"title\") || \"\",\n            config: {\n                dataset_id: this.dataset_id,\n                chart_dict: this.chart_dict\n            }\n        });\n        viz\n            .save()\n            .then(function(response) {\n                if (response && response.id) {\n                    self.visualization_id = response.id;\n                    if (options.success) {\n                        options.success();\n                    }\n                    console.debug(\"model::save() - Received visualization id: \" + response.id);\n                } else {\n                    if (options.error) {\n                        options.error();\n                    }\n                    console.debug(\"model::save() - Unrecognized response. Saving may have failed.\");\n                }\n            })\n            .fail(function(response) {\n                if (options.error) {\n                    options.error();\n                }\n                console.debug(\"model::save() - Saving failed.\");\n            });\n        console.debug(\"model::save() - Saving with configuration.\");\n    },\n\n    /** Load nested models/collections from packed dictionary */\n    load: function(chart_parsed) {\n        var d = chart_parsed || this.chart_dict;\n        if (d) {\n            console.debug(\"model::load() - Attempting to load with configuration:\");\n            console.debug(d);\n        }\n        this.reset();\n        if (d && d.attributes) {\n            this.set(d.attributes);\n            this.state(\"ok\", \"Loading saved visualization...\");\n            this.settings.set(d.settings);\n            this.groups.reset();\n            this.groups.add(d.groups);\n            this.set(\"modified\", false);\n            this.trigger(\"load\");\n            console.debug(\"model::load() - Loading chart model \" + d.attributes.type + \".\");\n            return true;\n        } else {\n            this.set(\"modified\", true);\n            this.trigger(\"load\");\n            console.debug(\"model::load() - Visualization attributes unavailable.\");\n            return false;\n        }\n    }\n});\n"]}