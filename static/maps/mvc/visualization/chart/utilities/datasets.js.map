{"version":3,"sources":["mvc/visualization/chart/utilities/datasets.js"],"names":["_","requestPanels","options","process","chart","render","targets","dataset_id","get","dataset_groups","groups","request","success","result","length","valid","group_index","group","state","resolve","err","console","debug","reject","_cache","column_list","each","column_def","column_name","column","block_id","_block_id","indexOf","undefined","push","_fillFromCache","url","Galaxy","root","data","data_type","provider","indeces","toString","response","column_length","results","Array","i","row","j","v","limit","column_data","Math","max","dict","merge","key","values","attributes","x","parseInt","value","isNaN","is_label"],"mappings":"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","file":"../../../../../scripts/mvc/visualization/chart/utilities/datasets.js","sourcesContent":["/** This class handles, formats and caches datasets. */\nimport Utils from \"utils/utils\";\nimport * as _ from \"underscore\";\n\n/* global Galaxy */\n\n/** Assists in assigning the viewport panels */\nvar requestPanels = function(options) {\n    var process = options.process;\n    var chart = options.chart;\n    var render = options.render;\n    var targets = options.targets;\n    var dataset_id = options.dataset_id || options.chart.get(\"dataset_id\");\n    var dataset_groups = options.dataset_groups || options.chart.groups;\n    request({\n        chart: chart,\n        dataset_id: dataset_id,\n        dataset_groups: dataset_groups,\n        success: function(result) {\n            try {\n                if (targets.length == result.length) {\n                    var valid = true;\n                    for (var group_index in result) {\n                        var group = result[group_index];\n                        if (!render(targets[group_index], [group])) {\n                            valid = false;\n                            break;\n                        }\n                    }\n                    if (valid) {\n                        chart.state(\"ok\", \"Multi-panel chart drawn.\");\n                    }\n                } else if (targets.length == 1) {\n                    if (render(targets[0], result)) {\n                        chart.state(\"ok\", \"Chart drawn.\");\n                    }\n                } else {\n                    chart.state(\"failed\", \"Invalid panel count.\");\n                }\n                process.resolve();\n            } catch (err) {\n                console.debug(\"FAILED: tabular-utilities::panelHelper() - \" + err);\n                chart.state(\"failed\", err);\n                process.reject();\n            }\n        }\n    });\n};\n\n/** Fills request dictionary with data from cache/response */\nvar _cache = {};\nvar request = function(options) {\n    var groups = options.dataset_groups;\n    var dataset_id = options.dataset_id;\n    // identify columns needed to fulfill request\n    var column_list = [];\n    groups.each(function(group) {\n        _.each(group.get(\"__data_columns\"), function(column_def, column_name) {\n            var column = group.get(column_name);\n            var block_id = _block_id(dataset_id, column);\n            if (\n                column_list.indexOf(column) === -1 &&\n                !_cache[block_id] &&\n                column != \"auto\" &&\n                column != \"zero\" &&\n                column !== undefined\n            ) {\n                column_list.push(column);\n            }\n        });\n    });\n    if (column_list.length === 0) {\n        _fillFromCache(options);\n        return;\n    }\n    // Fetch data columns into dataset object\n    Utils.get({\n        url: Galaxy.root + \"api/datasets/\" + dataset_id,\n        data: {\n            data_type: \"raw_data\",\n            provider: \"dataset-column\",\n            indeces: column_list.toString()\n        },\n        success: function(response) {\n            var column_length = column_list.length;\n            var results = new Array(column_length);\n            for (let i = 0; i < results.length; i++) {\n                results[i] = [];\n            }\n            for (let i in response.data) {\n                var row = response.data[i];\n                for (let j in row) {\n                    var v = row[j];\n                    if (v !== undefined && v != 2147483647 && j < column_length) {\n                        results[j].push(v);\n                    }\n                }\n            }\n            console.debug(\"tabular-datasets::_fetch() - Fetching complete.\");\n            for (let i in results) {\n                var column = column_list[i];\n                var block_id = _block_id(dataset_id, column);\n                _cache[block_id] = results[i];\n            }\n            _fillFromCache(options);\n        }\n    });\n};\n\n/** Fill data from cache */\nvar _fillFromCache = function(options) {\n    var groups = options.dataset_groups;\n    var dataset_id = options.dataset_id;\n    console.debug(\"tabular-datasets::_fillFromCache() - Filling request from cache.\");\n    var limit = 0;\n    groups.each(function(group) {\n        _.each(group.get(\"__data_columns\"), function(column_def, column_name) {\n            var column = group.get(column_name);\n            var block_id = _block_id(dataset_id, column);\n            var column_data = _cache[block_id];\n            if (column_data) {\n                limit = Math.max(limit, column_data.length);\n            }\n        });\n    });\n    if (limit === 0) {\n        console.debug(\"tabular-datasets::_fillFromCache() - No data available.\");\n        if (options.chart) {\n            options.chart.state(\"failed\", \"No data available.\");\n        }\n    }\n    var results = [];\n    groups.each(function(group, group_index) {\n        var dict = Utils.merge({ key: group_index + \":\" + group.get(\"key\"), values: [] }, group.attributes);\n        for (let j = 0; j < limit; j++) {\n            dict.values[j] = { x: parseInt(j) };\n        }\n        results.push(dict);\n    });\n    groups.each(function(group, group_index) {\n        var values = results[group_index].values;\n        _.each(group.get(\"__data_columns\"), function(column_def, column_name) {\n            var column = group.get(column_name);\n            switch (column) {\n                case \"auto\":\n                    for (let j = 0; j < limit; j++) {\n                        values[j][column_name] = parseInt(j);\n                    }\n                    break;\n                case \"zero\":\n                    for (let j = 0; j < limit; j++) {\n                        values[j][column_name] = 0;\n                    }\n                    break;\n                default:\n                    var block_id = _block_id(dataset_id, column);\n                    var column_data = _cache[block_id];\n                    for (let j = 0; j < limit; j++) {\n                        var value = values[j];\n                        var v = column_data[j];\n                        if (isNaN(v) && !column_def.is_label) {\n                            v = 0;\n                        }\n                        value[column_name] = v;\n                    }\n            }\n        });\n    });\n    options.success(results);\n};\n\n/** Get block id */\nvar _block_id = function(dataset_id, column) {\n    return dataset_id + \"_\" + \"_\" + column;\n};\n\nexport default { request: request, requestPanels: requestPanels };\n"]}