{"version":3,"sources":["mvc/visualization/chart/utilities/jobs.js"],"names":["_","WAITTIME","requestCharts","chart","module","settings_string","columns_string","group_index","key","settings","attributes","settings_value","get","each","pair","replace","RegExp","substring","length","groups","group","data_columns","name","parseInt","tool_id","inputs","input","id","src","columns","request","parameters","success","error","state","type","url","Galaxy","root","data","deleted","refreshHdas","set","wait","response","outputs","job","save","message","dataset","ready","window","setTimeout","currHistoryPanel","refreshContents"],"mappings":";;;;;;;QACYA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGZ;;AAEA;AANA;AAOA,QAAMC,WAAW,IAAjB;;AAEA;AACA,QAAIC,gBAAgB,SAAhBA,aAAgB,CAASC,KAAT,EAAgBC,MAAhB,EAAwB;AACxC,YAAIC,kBAAkB,EAAtB;AACA,YAAIC,iBAAiB,EAArB;AACA,YAAIC,cAAc,CAAlB;AACA,aAAK,IAAIC,GAAT,IAAgBL,MAAMM,QAAN,CAAeC,UAA/B,EAA2C;AACvC,gBAAIC,iBAAiBR,MAAMM,QAAN,CAAeG,GAAf,CAAmBJ,GAAnB,CAArB;AACAR,cAAEa,IAAF,CAAO,CAAC,CAAC,GAAD,EAAM,OAAN,CAAD,EAAiB,CAAC,GAAD,EAAM,OAAN,CAAjB,EAAiC,CAAC,GAAD,EAAM,OAAN,CAAjC,CAAP,EAAyD,UAASC,IAAT,EAAe;AACpEH,iCAAiBA,eAAeI,OAAf,CAAuB,IAAIC,MAAJ,CAAWF,KAAK,CAAL,CAAX,EAAoB,GAApB,CAAvB,EAAiDA,KAAK,CAAL,CAAjD,CAAjB;AACH,aAFD;AAGAT,+BAAmBG,MAAM,GAAN,GAAYG,cAAZ,GAA6B,IAAhD;AACH;AACDN,0BAAkBA,gBAAgBY,SAAhB,CAA0B,CAA1B,EAA6BZ,gBAAgBa,MAAhB,GAAyB,CAAtD,CAAlB;AACAf,cAAMgB,MAAN,CAAaN,IAAb,CAAkB,UAASO,KAAT,EAAgB;AAC9Bb;AACAP,cAAEa,IAAF,CAAOO,MAAMR,GAAN,CAAU,gBAAV,CAAP,EAAoC,UAASS,YAAT,EAAuBC,IAAvB,EAA6B;AAC7DhB,kCAAkBgB,OAAO,GAAP,GAAaf,WAAb,GAA2B,GAA3B,IAAkCgB,SAASH,MAAMR,GAAN,CAAUU,IAAV,CAAT,IAA4B,CAA9D,IAAmE,IAArF;AACH,aAFD;AAGH,SALD;AAMAhB,yBAAiBA,eAAeW,SAAf,CAAyB,CAAzB,EAA4BX,eAAeY,MAAf,GAAwB,CAApD,CAAjB;AACA,eAAO;AACHM,qBAAS,sDADN;AAEHC,oBAAQ;AACJC,uBAAO;AACHC,wBAAIxB,MAAMS,GAAN,CAAU,YAAV,CADD;AAEHgB,yBAAK;AAFF,iBADH;AAKJxB,wBAAQA,MALJ;AAMJyB,yBAASvB,cANL;AAOJG,0BAAUJ;AAPN;AAFL,SAAP;AAYH,KA/BD;;AAiCA;AACA,QAAIyB,UAAU,SAAVA,OAAU,CAAS3B,KAAT,EAAgB4B,UAAhB,EAA4BC,QAA5B,EAAqCC,MAArC,EAA4C;AACtD9B,cAAM+B,KAAN,CAAY,MAAZ,EAAoB,2BAApB;AACA,YAAI/B,MAAMS,GAAN,CAAU,UAAV,KAAyBT,MAAMS,GAAN,CAAU,gBAAV,CAA7B,EAA0D;AACtD,4BAAMkB,OAAN,CAAc;AACVK,sBAAM,KADI;AAEVC,qBAAKC,OAAOC,IAAP,GAAc,8BAAd,GAA+CnC,MAAMS,GAAN,CAAU,gBAAV,CAF1C;AAGV2B,sBAAM,EAAEC,SAAS,IAAX,EAHI;AAIVR,yBAAS,mBAAM;AACXS;AACH;AANS,aAAd;AAQAtC,kBAAMuC,GAAN,CAAU,gBAAV,EAA4B,IAA5B;AACAvC,kBAAMuC,GAAN,CAAU,UAAV,EAAsB,KAAtB;AACH;AACD,YAAIvC,MAAMS,GAAN,CAAU,gBAAV,CAAJ,EAAiC;AAC7B+B,iBAAKxC,KAAL,EAAY6B,QAAZ,EAAqBC,MAArB;AACH,SAFD,MAEO;AACH9B,kBAAM+B,KAAN,CAAY,MAAZ,EAAoB,wBAApB;AACA,4BAAMJ,OAAN,CAAc;AACVK,sBAAM,MADI;AAEVC,qBAAKC,OAAOC,IAAP,GAAc,WAFT;AAGVC,sBAAMR,UAHI;AAIVC,yBAAS,iBAASY,QAAT,EAAmB;AACxB,wBAAI,CAACA,SAASC,OAAV,IAAqBD,SAASC,OAAT,CAAiB3B,MAAjB,KAA4B,CAArD,EAAwD;AACpDf,8BAAM+B,KAAN,CAAY,QAAZ,EAAsB,qCAAtB;AACA,4BAAID,MAAJ,EAAW;AACPA;AACH;AACJ,qBALD,MAKO;AACHQ;AACA,4BAAIK,MAAMF,SAASC,OAAT,CAAiB,CAAjB,CAAV;AACA1C,8BAAM+B,KAAN,CACI,MADJ,EAEI,iGAFJ;AAIA/B,8BAAMuC,GAAN,CAAU,gBAAV,EAA4BI,IAAInB,EAAhC;AACAxB,8BAAM4C,IAAN;AACAJ,6BAAKxC,KAAL,EAAY6B,QAAZ,EAAqBC,MAArB;AACH;AACJ,iBArBS;AAsBVA,uBAAO,eAASW,QAAT,EAAmB;AACtB,wBAAII,UAAU,EAAd;AACA,wBAAIJ,YAAYA,SAASI,OAArB,IAAgCJ,SAASI,OAAT,CAAiBT,IAAjD,IAAyDK,SAASI,OAAT,CAAiBT,IAAjB,CAAsBb,KAAnF,EAA0F;AACtFsB,kCAAUJ,SAASI,OAAT,CAAiBT,IAAjB,CAAsBb,KAAtB,GAA8B,GAAxC;AACH;AACDvB,0BAAM+B,KAAN,CACI,QADJ,EAEI,sCACIH,WAAWP,OADf,GAEI,4CAFJ,GAGIwB,OALR;AAOA,wBAAIf,MAAJ,EAAW;AACPA;AACH;AACJ;AArCS,aAAd;AAuCH;AACJ,KA1DD;;AA4DA;AACA,QAAIU,OAAO,SAAPA,IAAO,CAASxC,KAAT,EAAgB6B,SAAhB,EAAyBC,KAAzB,EAAgC;AACvC,wBAAMH,OAAN,CAAc;AACVK,kBAAM,KADI;AAEVC,iBAAKC,OAAOC,IAAP,GAAc,eAAd,GAAgCnC,MAAMS,GAAN,CAAU,gBAAV,CAF3B;AAGV2B,kBAAM,EAHI;AAIVP,qBAAS,iBAASiB,OAAT,EAAkB;AACvB,oBAAIC,QAAQ,KAAZ;AACA,wBAAQD,QAAQf,KAAhB;AACI,yBAAK,IAAL;AACI/B,8BAAM+B,KAAN,CAAY,MAAZ,EAAoB,+BAApB;AACA,4BAAIF,SAAJ,EAAa;AACTA,sCAAQiB,OAAR;AACH;AACDC,gCAAQ,IAAR;AACA;AACJ,yBAAK,OAAL;AACI/C,8BAAM+B,KAAN,CAAY,QAAZ,EAAsB,uDAAtB;AACA,4BAAID,KAAJ,EAAW;AACPA,kCAAMgB,OAAN;AACH;AACDC,gCAAQ,IAAR;AACA;AACJ,yBAAK,SAAL;AACI/C,8BAAM+B,KAAN,CACI,MADJ,EAEI,uIAFJ;AAhBR;AAqBA,oBAAI,CAACgB,KAAL,EAAY;AACRC,2BAAOC,UAAP,CAAkB,YAAW;AACzBT,6BAAKxC,KAAL,EAAY6B,SAAZ,EAAqBC,KAArB;AACH,qBAFD,EAEGhC,QAFH;AAGH;AACJ;AAhCS,SAAd;AAkCH,KAnCD;;AAqCA;AACA,QAAIwC,cAAc,SAAdA,WAAc,GAAW;AACzB,YAAIJ,UAAUA,OAAOgB,gBAArB,EAAuC;AACnChB,mBAAOgB,gBAAP,CAAwBC,eAAxB;AACH;AACJ,KAJD;;sBAMe,EAAExB,SAASA,OAAX,EAAoB5B,eAAeA,aAAnC,E","file":"../../../../../scripts/mvc/visualization/chart/utilities/jobs.js","sourcesContent":["/** This class handles job submissions to the Galaxy API. */\nimport * as _ from \"underscore\";\nimport Utils from \"utils/utils\";\n\n/* global Galaxy */\n\n/** Time to wait before refreshing to check if job has completed */\nconst WAITTIME = 1000;\n\n/** build job dictionary */\nvar requestCharts = function(chart, module) {\n    var settings_string = \"\";\n    var columns_string = \"\";\n    var group_index = 0;\n    for (var key in chart.settings.attributes) {\n        var settings_value = chart.settings.get(key);\n        _.each([[\" \", \"&#32;\"], [\",\", \"&#44;\"], [\":\", \"&#58;\"]], function(pair) {\n            settings_value = settings_value.replace(new RegExp(pair[0], \"g\"), pair[1]);\n        });\n        settings_string += key + \":\" + settings_value + \", \";\n    }\n    settings_string = settings_string.substring(0, settings_string.length - 2);\n    chart.groups.each(function(group) {\n        group_index++;\n        _.each(group.get(\"__data_columns\"), function(data_columns, name) {\n            columns_string += name + \"_\" + group_index + \":\" + (parseInt(group.get(name)) + 1) + \", \";\n        });\n    });\n    columns_string = columns_string.substring(0, columns_string.length - 2);\n    return {\n        tool_id: \"toolshed.g2.bx.psu.edu/repos/iuc/charts/charts/1.0.1\",\n        inputs: {\n            input: {\n                id: chart.get(\"dataset_id\"),\n                src: \"hda\"\n            },\n            module: module,\n            columns: columns_string,\n            settings: settings_string\n        }\n    };\n};\n\n/** Submit job request to charts tool */\nvar request = function(chart, parameters, success, error) {\n    chart.state(\"wait\", \"Requesting job results...\");\n    if (chart.get(\"modified\") && chart.get(\"dataset_id_job\")) {\n        Utils.request({\n            type: \"PUT\",\n            url: Galaxy.root + \"api/histories/none/contents/\" + chart.get(\"dataset_id_job\"),\n            data: { deleted: true },\n            success: () => {\n                refreshHdas();\n            }\n        });\n        chart.set(\"dataset_id_job\", null);\n        chart.set(\"modified\", false);\n    }\n    if (chart.get(\"dataset_id_job\")) {\n        wait(chart, success, error);\n    } else {\n        chart.state(\"wait\", \"Sending job request...\");\n        Utils.request({\n            type: \"POST\",\n            url: Galaxy.root + \"api/tools\",\n            data: parameters,\n            success: function(response) {\n                if (!response.outputs || response.outputs.length === 0) {\n                    chart.state(\"failed\", \"Job submission failed. No response.\");\n                    if (error) {\n                        error();\n                    }\n                } else {\n                    refreshHdas();\n                    var job = response.outputs[0];\n                    chart.state(\n                        \"wait\",\n                        \"Your job has been queued. You may close the browser window. The job will run in the background.\"\n                    );\n                    chart.set(\"dataset_id_job\", job.id);\n                    chart.save();\n                    wait(chart, success, error);\n                }\n            },\n            error: function(response) {\n                var message = \"\";\n                if (response && response.message && response.message.data && response.message.data.input) {\n                    message = response.message.data.input + \".\";\n                }\n                chart.state(\n                    \"failed\",\n                    \"This visualization requires the '\" +\n                        parameters.tool_id +\n                        \"' tool. Please make sure it is installed. \" +\n                        message\n                );\n                if (error) {\n                    error();\n                }\n            }\n        });\n    }\n};\n\n/** Request job details */\nvar wait = function(chart, success, error) {\n    Utils.request({\n        type: \"GET\",\n        url: Galaxy.root + \"api/datasets/\" + chart.get(\"dataset_id_job\"),\n        data: {},\n        success: function(dataset) {\n            var ready = false;\n            switch (dataset.state) {\n                case \"ok\":\n                    chart.state(\"wait\", \"Job completed successfully...\");\n                    if (success) {\n                        success(dataset);\n                    }\n                    ready = true;\n                    break;\n                case \"error\":\n                    chart.state(\"failed\", \"Job has failed. Please check the history for details.\");\n                    if (error) {\n                        error(dataset);\n                    }\n                    ready = true;\n                    break;\n                case \"running\":\n                    chart.state(\n                        \"wait\",\n                        \"Your job is running in the background and you may close the browser tab. Results will be available in your saved visualizations list.\"\n                    );\n            }\n            if (!ready) {\n                window.setTimeout(function() {\n                    wait(chart, success, error);\n                }, WAITTIME);\n            }\n        }\n    });\n};\n\n/** Refresh history panel */\nvar refreshHdas = function() {\n    if (Galaxy && Galaxy.currHistoryPanel) {\n        Galaxy.currHistoryPanel.refreshContents();\n    }\n};\n\nexport default { request: request, requestCharts: requestCharts };\n"]}