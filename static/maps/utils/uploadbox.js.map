{"version":3,"sources":["utils/uploadbox.js"],"names":["jQuery","event","props","push","_uploadrequest","cnf","$","extend","error_default","error_server","error_login","error_retry","config","console","debug","xhr","XMLHttpRequest","open","url","setRequestHeader","onreadystatechange","readyState","DONE","indexOf","status","warning","text","statusText","error","response","responseText","parseJSON","e","success","upload","addEventListener","progress","send","data","uploadchunk","attempts","timeout","error_file","error_attempt","error_tool","error_message","file_data","files","file","session_id","session","id","Date","valueOf","size","chunk_size","chunk_upload_size","process","start","slicer","mozSlice","webkitSlice","slice","end","Math","min","form","FormData","append","bind","Galaxy","root","new_start","payload","inputs","JSON","parse","name","stringify","ajax","method","tool_response","err_msg","responseJSON","upload_response","setTimeout","lengthComputable","round","loaded","uploadpost","maxfilesize","error_filesize","key","sizes","d","total","fn","uploadinput","options","el","opts","ondragover","ondragleave","onchange","multiple","$input","change","target","value","on","dataTransfer","preventDefault","stopPropagation","dialog","trigger","uploadbox","dragover","dragleave","announce","initialize","m","alert","complete","queue","queue_index","queue_length","queue_running","queue_stop","_","each","chunk_mode","add","length","index","undefined","mode","filter","f","duplicate","String","remove","submitter","message","percentage","select","reset","_session","stop","configure","compatible","window","File","FileList"],"mappings":"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","file":"../../scripts/utils/uploadbox.js","sourcesContent":["/*\n    galaxy upload plugins - requires FormData and XMLHttpRequest\n*/\n($ => {\n    // add event properties\n    jQuery.event.props.push(\"dataTransfer\");\n\n    /**\n        xhr request helper\n    */\n    var _uploadrequest = config => {\n        var cnf = $.extend(\n            {\n                error_default: \"Please make sure the file is available.\",\n                error_server: \"Upload request failed.\",\n                error_login: \"Uploads require you to log in.\",\n                error_retry: \"Waiting for server to resume...\"\n            },\n            config\n        );\n        console.debug(cnf);\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", cnf.url, true);\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState == xhr.DONE) {\n                if ([502, 0].indexOf(xhr.status) !== -1 && cnf.warning) {\n                    cnf.warning(cnf.error_retry);\n                } else if (xhr.status < 200 || xhr.status > 299) {\n                    var text = xhr.statusText;\n                    if (xhr.status == 403) {\n                        text = cnf.error_login;\n                    } else if (xhr.status == 0) {\n                        text = cnf.error_server;\n                    } else if (!text) {\n                        text = cnf.error_default;\n                    }\n                    cnf.error(`${text} (${xhr.status})`);\n                } else {\n                    var response = null;\n                    if (xhr.responseText) {\n                        try {\n                            response = jQuery.parseJSON(xhr.responseText);\n                        } catch (e) {\n                            response = xhr.responseText;\n                        }\n                    }\n                    cnf.success(response);\n                }\n            }\n        };\n        xhr.upload.addEventListener(\"progress\", cnf.progress, false);\n        xhr.send(cnf.data);\n    };\n\n    /**\n        Posts chunked files to the API.\n    */\n    $.uploadchunk = function(config) {\n        // parse options\n        var cnf = $.extend(\n            {},\n            {\n                data: {},\n                success: () => {},\n                error: () => {},\n                warning: () => {},\n                progress: () => {},\n                attempts: 70000,\n                timeout: 5000,\n                url: null,\n                error_file: \"File not provided.\",\n                error_attempt: \"Maximum number of attempts reached.\",\n                error_tool: \"Tool submission failed.\"\n            },\n            config\n        );\n\n        // initial validation\n        var data = cnf.data;\n        if (data.error_message) {\n            cnf.error(data.error_message);\n            return;\n        }\n        var file_data = data.files && data.files[0];\n        if (!file_data) {\n            cnf.error(cnf.error_file);\n            return;\n        }\n        var file = file_data.file;\n        var attempts = cnf.attempts;\n        var session_id = `${cnf.session.id}-${new Date().valueOf()}-${file.size}`;\n        var chunk_size = cnf.session.chunk_upload_size;\n        console.debug(`Starting chunked uploads [size=${chunk_size}].`);\n\n        // chunk processing helper\n        function process(start) {\n            start = start || 0;\n            var slicer = file.mozSlice || file.webkitSlice || file.slice;\n            if (!slicer) {\n                cnf.error(\"Browser does not support chunked uploads.\");\n                return;\n            }\n            var end = Math.min(start + chunk_size, file.size);\n            var size = file.size;\n            console.debug(`Submitting chunk at ${start} bytes...`);\n            var form = new FormData();\n            form.append(\"session_id\", session_id);\n            form.append(\"session_start\", start);\n            form.append(\"session_chunk\", slicer.bind(file)(start, end));\n            _uploadrequest({\n                url: `${Galaxy.root}api/uploads`,\n                data: form,\n                success: upload_response => {\n                    var new_start = start + chunk_size;\n                    if (new_start < size) {\n                        attempts = cnf.attempts;\n                        process(new_start);\n                    } else {\n                        console.debug(\"Upload completed.\");\n                        data.payload.inputs = JSON.parse(data.payload.inputs);\n                        data.payload.inputs[\"files_0|file_data\"] = {\n                            session_id: session_id,\n                            name: file.name\n                        };\n                        data.payload.inputs = JSON.stringify(data.payload.inputs);\n                        $.ajax({\n                            url: `${Galaxy.root}api/tools`,\n                            method: \"POST\",\n                            data: data.payload,\n                            success: tool_response => {\n                                cnf.success(tool_response);\n                            },\n                            error: tool_response => {\n                                var err_msg =\n                                    tool_response && tool_response.responseJSON && tool_response.responseJSON.err_msg;\n                                cnf.error(err_msg || cnf.error_tool);\n                            }\n                        });\n                    }\n                },\n                warning: upload_response => {\n                    if (--attempts > 0) {\n                        console.debug(\"Retrying last chunk...\");\n                        cnf.warning(upload_response);\n                        setTimeout(() => process(start), cnf.timeout);\n                    } else {\n                        console.debug(cnf.error_attempt);\n                        cnf.error(cnf.error_attempt);\n                    }\n                },\n                error: upload_response => {\n                    console.debug(upload_response);\n                    cnf.error(upload_response);\n                },\n                progress: e => {\n                    if (e.lengthComputable) {\n                        cnf.progress(Math.min(Math.round((start + e.loaded) * 100 / file.size), 100));\n                    }\n                }\n            });\n        }\n\n        // initiate processing queue for chunks\n        process();\n    };\n\n    /**\n        Posts multiple files without chunking to the API.\n    */\n    $.uploadpost = function(config) {\n        var cnf = $.extend(\n            {},\n            {\n                data: {},\n                success: () => {},\n                error: () => {},\n                progress: () => {},\n                url: null,\n                maxfilesize: 1048576 * 2048,\n                error_filesize: \"File exceeds 2GB. Please use a FTP client.\"\n            },\n            config\n        );\n        var data = cnf.data;\n        if (data.error_message) {\n            cnf.error(data.error_message);\n            return;\n        }\n\n        // construct form data\n        var form = new FormData();\n        for (let key in data.payload) {\n            form.append(key, data.payload[key]);\n        }\n\n        // add files to submission\n        var sizes = 0;\n        for (let key in data.files) {\n            var d = data.files[key];\n            form.append(d.name, d.file, d.file.name);\n            sizes += d.file.size;\n        }\n\n        // check file size, unless it's an ftp file\n        if (sizes > cnf.maxfilesize) {\n            cnf.error(cnf.error_filesize);\n            return;\n        }\n\n        // submit request\n        _uploadrequest({\n            url: cnf.url,\n            data: form,\n            success: cnf.success,\n            error: cnf.error,\n            progress: e => {\n                if (e.lengthComputable) {\n                    cnf.progress(Math.round(e.loaded * 100 / e.total));\n                }\n            }\n        });\n    };\n\n    /**\n        Handles the upload events drag/drop etc.\n    */\n    $.fn.uploadinput = function(options) {\n        // initialize\n        var el = this;\n        var opts = $.extend(\n            {},\n            {\n                ondragover: () => {},\n                ondragleave: () => {},\n                onchange: () => {},\n                multiple: false\n            },\n            options\n        );\n\n        // append hidden upload field\n        var $input = $(`<input type=\"file\" style=\"display: none\" ${(opts.multiple && \"multiple\") || \"\"}/>`);\n        el.append(\n            $input.change(e => {\n                opts.onchange(e.target.files);\n                e.target.value = null;\n            })\n        );\n\n        // drag/drop events\n        el.on(\"drop\", e => {\n            opts.ondragleave(e);\n            if (e.dataTransfer) {\n                opts.onchange(e.dataTransfer.files);\n                e.preventDefault();\n            }\n        });\n        el.on(\"dragover\", e => {\n            e.preventDefault();\n            opts.ondragover(e);\n        });\n        el.on(\"dragleave\", e => {\n            e.stopPropagation();\n            opts.ondragleave(e);\n        });\n\n        // exports\n        return {\n            dialog: () => {\n                $input.trigger(\"click\");\n            }\n        };\n    };\n\n    /**\n        Handles the upload queue and events such as drag/drop etc.\n    */\n    $.fn.uploadbox = function(options) {\n        // parse options\n        var opts = $.extend(\n            {},\n            {\n                dragover: () => {},\n                dragleave: () => {},\n                announce: d => {},\n                initialize: d => {},\n                progress: (d, m) => {},\n                success: (d, m) => {},\n                warning: (d, m) => {},\n                error: (d, m) => {\n                    alert(m);\n                },\n                complete: () => {}\n            },\n            options\n        );\n\n        // file queue\n        var queue = {};\n\n        // session options\n        var session = null;\n\n        // queue index/length counter\n        var queue_index = 0;\n        var queue_length = 0;\n\n        // indicates if queue is currently running\n        var queue_running = false;\n        var queue_stop = false;\n\n        // element\n        var uploadinput = $(this).uploadinput({\n            multiple: true,\n            onchange: files => {\n                _.each(files, file => {\n                    file.chunk_mode = true;\n                });\n                add(files);\n            },\n            ondragover: options.ondragover,\n            ondragleave: options.ondragleave\n        });\n\n        // add new files to upload queue\n        function add(files) {\n            if (files && files.length && !queue_running) {\n                var index = undefined;\n                _.each(files, (file, key) => {\n                    if (\n                        file.mode !== \"new\" &&\n                        _.filter(queue, f => f.name === file.name && f.size === file.size).length\n                    ) {\n                        file.duplicate = true;\n                    }\n                });\n                _.each(files, file => {\n                    if (!file.duplicate) {\n                        index = String(queue_index++);\n                        queue[index] = file;\n                        opts.announce(index, queue[index]);\n                        queue_length++;\n                    }\n                });\n                return index;\n            }\n        }\n\n        // remove file from queue\n        function remove(index) {\n            if (queue[index]) {\n                delete queue[index];\n                queue_length--;\n            }\n        }\n\n        // process an upload, recursive\n        function process() {\n            // validate\n            if (queue_length == 0 || queue_stop) {\n                queue_stop = false;\n                queue_running = false;\n                opts.complete();\n                return;\n            } else {\n                queue_running = true;\n            }\n\n            // get an identifier from the queue\n            var index = -1;\n            for (let key in queue) {\n                index = key;\n                break;\n            }\n\n            // get current file from queue\n            var file = queue[index];\n\n            // remove from queue\n            remove(index);\n\n            // create and submit data\n            var submitter = $.uploadpost;\n            if (\n                file.chunk_mode &&\n                session &&\n                session.id &&\n                session.chunk_upload_size &&\n                session.chunk_upload_size > 0\n            ) {\n                submitter = $.uploadchunk;\n            }\n            submitter({\n                url: opts.url,\n                data: opts.initialize(index),\n                session: session,\n                success: message => {\n                    opts.success(index, message);\n                    process();\n                },\n                warning: message => {\n                    opts.warning(index, message);\n                },\n                error: message => {\n                    opts.error(index, message);\n                    process();\n                },\n                progress: percentage => {\n                    opts.progress(index, percentage);\n                }\n            });\n        }\n\n        /*\n            public interface\n        */\n\n        // open file browser for selection\n        function select() {\n            uploadinput.dialog();\n        }\n\n        // remove all entries from queue\n        function reset(index) {\n            for (index in queue) {\n                remove(index);\n            }\n        }\n\n        // initiate upload process\n        function start(_session) {\n            session = _session;\n            if (!queue_running) {\n                queue_running = true;\n                process();\n            }\n        }\n\n        // stop upload process\n        function stop() {\n            queue_stop = true;\n        }\n\n        // set options\n        function configure(options) {\n            opts = $.extend({}, opts, options);\n            return opts;\n        }\n\n        // verify browser compatibility\n        function compatible() {\n            return window.File && window.FormData && window.XMLHttpRequest && window.FileList;\n        }\n\n        // export functions\n        return {\n            select: select,\n            add: add,\n            remove: remove,\n            start: start,\n            stop: stop,\n            reset: reset,\n            configure: configure,\n            compatible: compatible\n        };\n    };\n})(jQuery);\n"]}