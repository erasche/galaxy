{"version":3,"sources":["ui/peek-column-selector.js"],"names":["defaults","renameColumns","columnNames","commentChar","hideCommentRows","includePrompts","topLeftContent","PEEKCONTROL_CLASS","CHANGE_EVENT","RENAME_EVENT","ROW_CLASS","PROMPT_CLASS","SELECTED_CLASS","DISABLED_CLASS","BUTTON_CLASS","RENAMABLE_HEADER_CLASS","COLUMN_INDEX_DATA_KEY","COLUMN_NAME_DATA_KEY","validateControl","control","disabled","$","type","Error","JSON","stringify","multiselect","selected","label","id","indexOf","buildButton","columnIndex","addClass","text","buildControlCell","$td","html","attr","setSelectedText","$cell","$button","children","hasClass","selectedText","undefined","unselectedText","buildSingleSelectCell","click","selectClick","ev","$otherSelected","parent","removeClass","each","eventData","key","val","data","parents","trigger","buildMultiSelectCell","multiselectClick","toggleClass","selectedColumnIndeces","find","map","i","e","makeArray","buildControlCells","count","$cells","push","buildControlRow","cellCount","$controlRow","$promptCell","append","peekColumnSelector","options","extend","$peek","$peektable","columnCount","length","rowCount","$commentRows","$this","match","RegExp","css","get","hide","$topLeft","first","prepend","$headers","replace","name","renameColumn","index","prevName","newColumnName","window","prompt","controls","forEach","fn","$peekColumnSelector","call"],"mappings":"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","file":"../../scripts/ui/peek-column-selector.js","sourcesContent":["//import $ from \"jquery\";\n// TODO:  This manipulates whatever jquery is available -- needs restructuring,\n// or removal (jquery plugins are a bad design choice for us at this point)\n// It is *only* used in the scatterplot viz, so this is safe.\n/* global $ */\n\n//==============================================================================\n/** Column selection using the peek display as the control.\n *  Adds rows to the bottom of the peek with clickable areas in each cell\n *      to allow the user to select columns.\n *  Column selection can be limited to a single column or multiple.\n *  (Optionally) adds a left hand column of column selection prompts.\n *  (Optionally) allows the column headers to be clicked/renamed\n *      and set to some initial value.\n *  (Optionally) hides comment rows.\n *  (Optionally) allows pre-selecting and disabling certain columns for\n *      each row control.\n *\n *  Construct by selecting a peek table to be used with jQuery and\n *      calling 'peekColumnSelector' with options.\n *  Options must include a 'controls' array and can include other options\n *      listed below.\n *  @example:\n *  $( 'pre.peek' ).peekColumnSelector({\n *          columnNames : [\"Chromosome\", \"Start\", \"Base\", \"\", \"\", \"Qual\" ],\n *          controls : [\n *              { label: 'X Column',  id: 'xColumn' },\n *              { label: 'Y Column',  id: 'yColumn', selected: 2 },\n *              { label: 'ID Column', id: 'idColumn', selected: 4, disabled: [ 1, 5 ] },\n *              { label: 'Heatmap',   id: 'heatmap', selected: [ 2, 4 ], disabled: [ 0, 1 ], multiselect: true,\n *                selectedText: 'Included', unselectedText: 'Excluded' }\n *          ],\n *          renameColumns       : true,\n *          hideCommentRows     : true,\n *          includePrompts      : true,\n *          topLeftContent      : 'Data sample:'\n *      }).on( 'peek-column-selector.change', function( ev, selection ){\n *          console.info( 'new selection:', selection );\n *          //{ yColumn: 2 }\n *      }).on( 'peek-column-selector.rename', function( ev, names ){\n *          console.info( 'column names', names );\n *          //[ 'Bler', 'Start', 'Base', '', '', 'Qual' ]\n *      });\n *\n *  An event is fired when column selection is changed and the event\n *      is passed an object in the form: { the row id : the new selection value }.\n *  An event is also fired when the table headers are re-named and\n *      is passed the new array of column names.\n */\n\n/** option defaults */\nvar defaults = {\n    /** does this control allow renaming headers? */\n    renameColumns: false,\n    /** does this control allow renaming headers? */\n    columnNames: [],\n    /** the comment character used by the peek's datatype */\n    commentChar: \"#\",\n    /** should comment rows be shown or hidden in the peek */\n    hideCommentRows: false,\n    /** should a column of row control prompts be used */\n    includePrompts: true,\n    /** what is the content of the top left cell (often a title) */\n    topLeftContent: \"Columns:\"\n};\n\n/** class added to the pre.peek element (to allow css on just the control) */\nconst PEEKCONTROL_CLASS = \"peek-column-selector\";\n\n/** the string of the event fired when a control row changes */\nconst CHANGE_EVENT = \"peek-column-selector.change\";\n\n/** the string of the event fired when a column is renamed */\nconst RENAME_EVENT = \"peek-column-selector.rename\";\n\n/** class added to the control rows */\nconst ROW_CLASS = \"control\";\n\n/** class added to the left-hand cells that serve as row prompts */\nconst PROMPT_CLASS = \"control-prompt\";\n\n/** class added to selected _cells_/tds */\nconst SELECTED_CLASS = \"selected\";\n\n/** class added to disabled/un-clickable cells/tds */\nconst DISABLED_CLASS = \"disabled\";\n\n/** class added to the clickable surface within a cell to select it */\nconst BUTTON_CLASS = \"button\";\n\n/** class added to peek table header (th) cells to indicate they can be clicked and are renamable */\nconst RENAMABLE_HEADER_CLASS = \"renamable-header\";\n\n/** the data key used for each cell to store the column index ('data-...') */\nconst COLUMN_INDEX_DATA_KEY = \"column-index\";\n\n/** renamable header data key used to store the column name (w/o the number and dot: '1.Bler') */\nconst COLUMN_NAME_DATA_KEY = \"column-name\";\n\n//TODO: not happy with pure functional here - rows should polymorph (multi, single, etc.)\n//TODO: needs clean up, move handlers to outer scope\n\n// ........................................................................\n/** validate the control data sent in for each row */\nfunction validateControl(control) {\n    if (control.disabled && $.type(control.disabled) !== \"array\") {\n        throw new Error(`\"disabled\" must be defined as an array of indeces: ${JSON.stringify(control)}`);\n    }\n    if (control.multiselect && control.selected && $.type(control.selected) !== \"array\") {\n        throw new Error(`Mulitselect rows need an array for \"selected\": ${JSON.stringify(control)}`);\n    }\n    if (!control.label || !control.id) {\n        throw new Error(`Peek controls need a label and id for each control row: ${JSON.stringify(control)}`);\n    }\n    if (control.disabled && control.disabled.indexOf(control.selected) !== -1) {\n        throw new Error(`Selected column is in the list of disabled columns: ${JSON.stringify(control)}`);\n    }\n    return control;\n}\n\n/** build the inner control surface (i.e. button-like) */\nfunction buildButton(control, columnIndex) {\n    return $(\"<div/>\")\n        .addClass(BUTTON_CLASS)\n        .text(control.label);\n}\n\n/** build the basic (shared) cell structure */\nfunction buildControlCell(control, columnIndex) {\n    var $td = $(\"<td/>\")\n        .html(buildButton(control, columnIndex))\n        .attr(`data-${COLUMN_INDEX_DATA_KEY}`, columnIndex);\n\n    // disable if index in disabled array\n    if (control.disabled && control.disabled.indexOf(columnIndex) !== -1) {\n        $td.addClass(DISABLED_CLASS);\n    }\n    return $td;\n}\n\n/** set the text of the control based on selected/un */\nfunction setSelectedText($cell, control, columnIndex) {\n    var $button = $cell.children(`.${BUTTON_CLASS}`);\n    if ($cell.hasClass(SELECTED_CLASS)) {\n        $button.html(control.selectedText !== undefined ? control.selectedText : control.label);\n    } else {\n        $button.html(control.unselectedText !== undefined ? control.unselectedText : control.label);\n    }\n}\n\n/** build a cell for a row that only allows one selection */\nfunction buildSingleSelectCell(control, columnIndex) {\n    // only one selection - selected is single index\n    var $cell = buildControlCell(control, columnIndex);\n    if (control.selected === columnIndex) {\n        $cell.addClass(SELECTED_CLASS);\n    }\n    setSelectedText($cell, control, columnIndex);\n\n    // only add the handler to non-disabled controls\n    if (!$cell.hasClass(DISABLED_CLASS)) {\n        $cell.click(function selectClick(ev) {\n            var $cell = $(this);\n            // don't re-select or fire event if already selected\n            if (!$cell.hasClass(SELECTED_CLASS)) {\n                // only one can be selected - remove selected on all others, add it here\n                var $otherSelected = $cell\n                    .parent()\n                    .children(`.${SELECTED_CLASS}`)\n                    .removeClass(SELECTED_CLASS);\n                $otherSelected.each(function() {\n                    setSelectedText($(this), control, columnIndex);\n                });\n\n                $cell.addClass(SELECTED_CLASS);\n                setSelectedText($cell, control, columnIndex);\n\n                // fire the event from the table itself, passing the id and index of selected\n                var eventData = {};\n\n                var key = $cell.parent().attr(\"id\");\n                var val = $cell.data(COLUMN_INDEX_DATA_KEY);\n                eventData[key] = val;\n                $cell.parents(\".peek\").trigger(CHANGE_EVENT, eventData);\n            }\n        });\n    }\n    return $cell;\n}\n\n/** build a cell for a row that allows multiple selections */\nfunction buildMultiSelectCell(control, columnIndex) {\n    var $cell = buildControlCell(control, columnIndex);\n    // multiple selection - selected is an array\n    if (control.selected && control.selected.indexOf(columnIndex) !== -1) {\n        $cell.addClass(SELECTED_CLASS);\n    }\n    setSelectedText($cell, control, columnIndex);\n\n    // only add the handler to non-disabled controls\n    if (!$cell.hasClass(DISABLED_CLASS)) {\n        $cell.click(function multiselectClick(ev) {\n            var $cell = $(this);\n            // can be more than one selected - toggle selected on this cell\n            $cell.toggleClass(SELECTED_CLASS);\n            setSelectedText($cell, control, columnIndex);\n            var selectedColumnIndeces = $cell\n                .parent()\n                .find(`.${SELECTED_CLASS}`)\n                .map((i, e) => $(e).data(COLUMN_INDEX_DATA_KEY));\n\n            // fire the event from the table itself, passing the id and index of selected\n            var eventData = {};\n\n            var key = $cell.parent().attr(\"id\");\n            var val = $.makeArray(selectedColumnIndeces);\n            eventData[key] = val;\n            $cell.parents(\".peek\").trigger(CHANGE_EVENT, eventData);\n        });\n    }\n    return $cell;\n}\n\n/** iterate over columns in peek and create a control for each */\nfunction buildControlCells(count, control) {\n    var $cells = [];\n    // build a control for each column - using a build fn based on control\n    for (var columnIndex = 0; columnIndex < count; columnIndex += 1) {\n        $cells.push(\n            control.multiselect\n                ? buildMultiSelectCell(control, columnIndex)\n                : buildSingleSelectCell(control, columnIndex)\n        );\n    }\n    return $cells;\n}\n\n/** build a row of controls for the peek */\nfunction buildControlRow(cellCount, control, includePrompts) {\n    var $controlRow = $(\"<tr/>\")\n        .attr(\"id\", control.id)\n        .addClass(ROW_CLASS);\n    if (includePrompts) {\n        var $promptCell = $(\"<td/>\")\n            .addClass(PROMPT_CLASS)\n            .text(`${control.label}:`);\n        $controlRow.append($promptCell);\n    }\n    $controlRow.append(buildControlCells(cellCount, control));\n    return $controlRow;\n}\n\n// ........................................................................\n/** add to the peek, using options for configuration, return the peek */\nfunction peekColumnSelector(options) {\n    options = $.extend(true, {}, defaults, options);\n\n    var $peek = $(this).addClass(PEEKCONTROL_CLASS);\n    var $peektable = $peek.find(\"table\");\n\n    var // get the size of the tables - width and height, number of comment rows\n    columnCount = $peektable.find(\"th\").length;\n\n    var rowCount = $peektable.find(\"tr\").length;\n\n    var // get the rows containing text starting with the comment char (also make them grey)\n    $commentRows = $peektable.find(\"td[colspan]\").map(function(e, i) {\n        var $this = $(this);\n        if ($this.text() && $this.text().match(new RegExp(`^${options.commentChar}`))) {\n            return $(this)\n                .css(\"color\", \"grey\")\n                .parent()\n                .get(0);\n        }\n        return null;\n    });\n\n    // should comment rows in the peek be hidden?\n    if (options.hideCommentRows) {\n        $commentRows.hide();\n        rowCount -= $commentRows.length;\n    }\n    //console.debug( 'rowCount:', rowCount, 'columnCount:', columnCount, '$commentRows:', $commentRows );\n\n    // should a first column of control prompts be added?\n    if (options.includePrompts) {\n        var $topLeft = $(\"<th/>\")\n            .addClass(\"top-left\")\n            .text(options.topLeftContent)\n            .attr(\"rowspan\", rowCount);\n        $peektable\n            .find(\"tr\")\n            .first()\n            .prepend($topLeft);\n    }\n\n    // save either the options column name or the parsed text of each column header in html5 data attr and text\n    var $headers = $peektable.find(\"th:not(.top-left)\").each(function(i, e) {\n        var $this = $(this);\n\n        var // can be '1.name' or '1'\n        text = $this.text().replace(/^\\d+\\.*/, \"\");\n\n        var name = options.columnNames[i] || text;\n        $this.attr(`data-${COLUMN_NAME_DATA_KEY}`, name).text(i + 1 + (name ? `.${name}` : \"\"));\n    });\n\n    // allow renaming of columns when the header is clicked\n    if (options.renameColumns) {\n        $headers.addClass(RENAMABLE_HEADER_CLASS).click(function renameColumn() {\n            // prompt for new name\n            var $this = $(this);\n\n            var index = $this.index() + (options.includePrompts ? 0 : 1);\n            var prevName = $this.data(COLUMN_NAME_DATA_KEY);\n            var newColumnName = window.prompt(\"New column name:\", prevName);\n            if (newColumnName !== null && newColumnName !== prevName) {\n                // set the new text and data\n                $this\n                    .text(index + (newColumnName ? `.${newColumnName}` : \"\"))\n                    .data(COLUMN_NAME_DATA_KEY, newColumnName)\n                    .attr(\"data-\", COLUMN_NAME_DATA_KEY, newColumnName);\n                // fire event for new column names\n                var columnNames = $.makeArray(\n                    $this\n                        .parent()\n                        .children(\"th:not(.top-left)\")\n                        .map(function() {\n                            return $(this).data(COLUMN_NAME_DATA_KEY);\n                        })\n                );\n                $this.parents(\".peek\").trigger(RENAME_EVENT, columnNames);\n            }\n        });\n    }\n\n    // build a row for each control\n    options.controls.forEach((control, i) => {\n        validateControl(control);\n        var $controlRow = buildControlRow(columnCount, control, options.includePrompts);\n        $peektable.find(\"tbody\").append($controlRow);\n    });\n    return this;\n}\n\n// ........................................................................\n// as jq plugin\n$.fn.extend({\n    peekColumnSelector: function $peekColumnSelector(options) {\n        return this.map(function() {\n            return peekColumnSelector.call(this, options);\n        });\n    }\n});\n"]}